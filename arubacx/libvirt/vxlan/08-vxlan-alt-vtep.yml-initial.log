[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [s1]
ok: [h2]
ok: [s2]
ok: [h3]
ok: [s3]
ok: [h4]
ok: [h5]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [s1]
ok: [h2]
ok: [s2]
ok: [s3]
ok: [h3]
ok: [h5]
ok: [h4]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, h1, h2, h3, h4, h5

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [s1]
ok: [h2]
ok: [s2]
ok: [h3]
ok: [s3]
ok: [h4]
ok: [h5]

TASK [Find configuration template for initial] *********************************
ok: [s1]
ok: [h1]
ok: [s2]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [s3]
ok: [h5]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    lldp
    !
  
  
    !
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
  
    !
    interface loopback 0
        ip address 10.0.0.6/32
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
    interface 1/1/1
        shutdown
        mtu 9198
        ip mtu 1600
        description s1 -> s2
        ip address 10.1.0.1/30
        no shutdown
    !
  
    interface 1/1/2
        shutdown
        mtu 9198
        ip mtu 1600
        description s1 -> s3
        ip address 10.1.0.9/30
        no shutdown
    !
  
    interface loopback 1
        description s1 -> stub
        ip address 172.16.0.6/24
    !
  
    interface 1/1/3
        shutdown
        mtu 9198
        no shutdown
    !
  
    interface 1/1/4
        shutdown
        mtu 9198
        no shutdown
    !
  
    interface vlan1000
        description VLAN red (1000) -> [h1,h2,s2,h3,s3]
    !
  
    interface vlan1001
        description VLAN blue (1001) -> [h4,h5,s2]
    !
    !
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    lldp
    !
  
  
    !
    vlan 1001
     name blue
    !
    vlan 1000
     name red
    !
  
    !
  
    !
    interface loopback 0
        ip address 10.0.0.7/32
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
    interface 1/1/1
        shutdown
        mtu 9198
        ip mtu 1600
        description s2 -> s1
        ip address 10.1.0.2/30
        no shutdown
    !
  
    interface 1/1/2
        shutdown
        mtu 9198
        ip mtu 1600
        description s2 -> s3
        ip address 10.1.0.5/30
        no shutdown
    !
  
    interface loopback 1
        description s2 -> stub
        ip address 172.16.1.7/24
    !
  
    interface 1/1/3
        shutdown
        mtu 9198
        no shutdown
    !
  
    interface 1/1/4
        shutdown
        mtu 9198
        no shutdown
    !
  
    interface vlan1000
        description VLAN red (1000) -> [h1,s1,h2,h3,s3]
    !
  
    interface vlan1001
        description VLAN blue (1001) -> [h4,s1,h5]
    !
    !
ok: [s3] => 
  msg: |-
    initial configuration for s3
    =========================================
    hostname s3
    !
    lldp
    !
  
  
    !
    vlan 1000
     name red
    !
  
    !
  
    !
    interface loopback 0
        ip address 10.0.0.8/32
    !
    interface mgmt
        no lldp transmit
        no lldp receive
    !
  
  
    interface 1/1/1
        shutdown
        mtu 9198
        ip mtu 1600
        description s3 -> s2
        ip address 10.1.0.6/30
        no shutdown
    !
  
    interface 1/1/2
        shutdown
        mtu 9198
        ip mtu 1600
        description s3 -> s1
        ip address 10.1.0.10/30
        no shutdown
    !
  
    interface 1/1/3
        shutdown
        mtu 9198
        no shutdown
    !
  
    interface vlan1000
        description VLAN red (1000) -> [h1,s1,h2,s2,h3]
    !
    !
ok: [h5] => 
  msg: |-
    initial configuration for h5
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h5
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.31.1.1 h1
    172.31.1.2 h2
    172.31.1.3 h3
    172.31.1.4 h4
    172.31.1.5 h5
    10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6 s1
    10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7 s2
    10.0.0.8 10.1.0.6 10.1.0.10 s3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h5
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.31.1.5/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h4
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.31.1.1 h1
    172.31.1.2 h2
    172.31.1.3 h3
    172.31.1.4 h4
    172.31.1.5 h5
    10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6 s1
    10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7 s2
    10.0.0.8 10.1.0.6 10.1.0.10 s3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h4
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.31.1.4/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h1
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.31.1.1 h1
    172.31.1.2 h2
    172.31.1.3 h3
    172.31.1.4 h4
    172.31.1.5 h5
    10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6 s1
    10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7 s2
    10.0.0.8 10.1.0.6 10.1.0.10 s3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h1
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.31.1.1/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h2
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.31.1.1 h1
    172.31.1.2 h2
    172.31.1.3 h3
    172.31.1.4 h4
    172.31.1.5 h5
    10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6 s1
    10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7 s2
    10.0.0.8 10.1.0.6 10.1.0.10 s3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h2
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.31.1.2/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h3
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.31.1.1 h1
    172.31.1.2 h2
    172.31.1.3 h3
    172.31.1.4 h4
    172.31.1.5 h5
    10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6 s1
    10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7 s2
    10.0.0.8 10.1.0.6 10.1.0.10 s3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h3
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.31.1.3/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s1]
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [s3]
ok: [s2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2, s3
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux.yml for h1, h2, h3, h4, h5

TASK [tempfile] ****************************************************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]
changed: [s3 -> localhost]

TASK [template] ****************************************************************
changed: [s2 -> localhost]
changed: [s3 -> localhost]
changed: [s1 -> localhost]

TASK [aoscx_config: set session auto-confirm for initial] **********************
changed: [s3]
changed: [s2]
changed: [s1]

TASK [aoscx_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/arubacx.j2] ***
changed: [s3]
changed: [s2]
changed: [s1]

TASK [file] ********************************************************************
changed: [s2 -> localhost]
changed: [s3 -> localhost]
changed: [s1 -> localhost]

TASK [template] ****************************************************************
changed: [h4]
changed: [h1]
changed: [h2]
changed: [h3]
changed: [h5]

TASK [Execute /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux.j2] ***
changed: [h2]
changed: [h1]
changed: [h4]
changed: [h3]
changed: [h5]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    !
    !
    interface 1/1/3
     no routing
     vlan access 1000
    !
    interface 1/1/4
     no routing
     vlan access 1001
    !
    interface vlan1000
    !
    interface vlan1001
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    !
    !
    interface 1/1/3
     no routing
     vlan access 1000
    !
    interface 1/1/4
     no routing
     vlan access 1001
    !
    interface vlan1000
    !
    interface vlan1001
ok: [s3] => 
  msg: |-
    vlan configuration for s3
    =========================================
    !
    !
    interface 1/1/3
     no routing
     vlan access 1000
    !
    interface vlan1000

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2, s3

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]
changed: [s3 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]
changed: [s3 -> localhost]

TASK [aoscx_config: set session auto-confirm for vlan] *************************
changed: [s3]
changed: [s1]
changed: [s2]

TASK [aoscx_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/arubacx.j2] ***
changed: [s3]
changed: [s2]
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]
changed: [s3 -> localhost]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for ospf] ************************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    router ospf 1
        router-id 10.0.0.6
  
  
  
        area 0.0.0.0
        area 0.0.0.0
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface loopback 0
        ip ospf 1 area 0.0.0.0
    !
    interface 1/1/1
    ! s1 -> s2
        ip ospf 1 area 0.0.0.0
        ip ospf network point-to-point
    !
    interface 1/1/2
    ! s1 -> s3
        ip ospf 1 area 0.0.0.0
        ip ospf network point-to-point
    !
    interface loopback 1
    ! s1 -> stub
        ip ospf 1 area 0.0.0.0
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    router ospf 1
        router-id 10.0.0.7
  
  
  
        area 0.0.0.0
        area 0.0.0.0
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface loopback 0
        ip ospf 1 area 0.0.0.0
    !
    interface 1/1/1
    ! s2 -> s1
        ip ospf 1 area 0.0.0.0
        ip ospf network point-to-point
    !
    interface 1/1/2
    ! s2 -> s3
        ip ospf 1 area 0.0.0.0
        ip ospf network point-to-point
    !
    interface loopback 1
    ! s2 -> stub
        ip ospf 1 area 0.0.0.0
    !
ok: [s3] => 
  msg: |-
    ospf configuration for s3
    =========================================
    router ospf 1
        router-id 10.0.0.8
  
  
  
        area 0.0.0.0
        area 0.0.0.0
        area 0.0.0.0
  
    !
    interface loopback 0
        ip ospf 1 area 0.0.0.0
    !
    interface 1/1/1
    ! s3 -> s2
        ip ospf 1 area 0.0.0.0
        ip ospf network point-to-point
    !
    interface 1/1/2
    ! s3 -> s1
        ip ospf 1 area 0.0.0.0
        ip ospf network point-to-point
    !

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2, s3

TASK [tempfile] ****************************************************************
changed: [s2 -> localhost]
changed: [s1 -> localhost]
changed: [s3 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]
changed: [s3 -> localhost]

TASK [aoscx_config: set session auto-confirm for ospf] *************************
changed: [s1]
changed: [s2]
changed: [s3]

TASK [aoscx_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/arubacx.j2] ***
changed: [s3]
changed: [s2]
changed: [s1]

TASK [file] ********************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]
changed: [s3 -> localhost]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for vxlan] ***********************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    !
    interface vxlan 1
      source ip 172.16.0.6
      no shutdown
      vni 101000
        vlan 1000
        vtep-peer 172.16.1.7
        vtep-peer 10.0.0.8
      vni 101001
        vlan 1001
        vtep-peer 172.16.1.7
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    !
    interface vxlan 1
      source ip 172.16.1.7
      no shutdown
      vni 101000
        vlan 1000
        vtep-peer 172.16.0.6
        vtep-peer 10.0.0.8
      vni 101001
        vlan 1001
        vtep-peer 172.16.0.6
ok: [s3] => 
  msg: |-
    vxlan configuration for s3
    =========================================
    !
    interface vxlan 1
      source ip 10.0.0.8
      no shutdown
      vni 101000
        vlan 1000
        vtep-peer 172.16.0.6
        vtep-peer 172.16.1.7

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/arubacx.yml for s1, s2, s3

TASK [tempfile] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]
changed: [s3 -> localhost]

TASK [template] ****************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]
changed: [s3 -> localhost]

TASK [aoscx_config: set session auto-confirm for vxlan] ************************
changed: [s1]
changed: [s3]
changed: [s2]

TASK [aoscx_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/arubacx.j2] ***
changed: [s1]
changed: [s2]
changed: [s3]

TASK [file] ********************************************************************
changed: [s1 -> localhost]
changed: [s2 -> localhost]
changed: [s3 -> localhost]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h3                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h4                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h5                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s1                         : ok=47   changed=20   unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s2                         : ok=47   changed=20   unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s3                         : ok=47   changed=20   unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   



This scenario (similar to vxlan-bridging) tests device
support for alternate VTEP endpoints.

* h1, h2 and h3 should be able to ping each other
* h4 and h5 should be able to ping each other

Please note it might take a while for the lab to work due to
STP learning phase

