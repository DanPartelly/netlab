[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Wait for device to become ready] *****************************************
skipping: [ros]
skipping: [s1]
skipping: [h1]
skipping: [h2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1, h1, h2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h1
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.16.0.3 h1
    172.16.1.4 h2
    10.0.0.2 10.1.0.1 ros
    172.16.0.2 172.16.1.2 ros-tenant
    10.0.0.1 10.1.0.2 s1
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h1
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.16.0.3/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    cat <<SCRIPT > /etc/netplan/04-routes-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          routes:
            - to: 172.16.0.0/16
              via: 172.16.0.2
            - to: 10.0.0.0/24
              via: 172.16.0.2
            - to: 10.1.0.0/16
              via: 172.16.0.2
            - to: 10.2.0.0/24
              via: 172.16.0.2
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [ros] => 
  msg: |-
    initial configuration for ros
    =========================================
    hostname ros
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.16.0.3
    ip host h2 172.16.1.4
    ip host ros-tenant 172.16.0.2 172.16.1.2
    ip host s1 10.0.0.1 10.1.0.2
    !
    vrf definition tenant
     rd 65000:1
     route-target import 65000:1
     route-target export 65000:1
    !
     address-family ipv4
     exit-address-family
    !
  
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.2 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     no shutdown
     description ros -> s1
     mtu 1600
     ip address 10.1.0.1 255.255.255.252
    !
    interface BDI1000
     no shutdown
     vrf forwarding tenant
     description VLAN red (1000) -> [h1,s1]
     ip address 172.16.0.2 255.255.255.0
    !
    interface BDI1001
     no shutdown
     vrf forwarding tenant
     description VLAN blue (1001) -> [h2,s1]
     ip address 172.16.1.2 255.255.255.0
    !
    no banner exec
    no banner login
    no banner incoming
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h2
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.16.0.3 h1
    172.16.1.4 h2
    10.0.0.2 10.1.0.1 ros
    172.16.0.2 172.16.1.2 ros-tenant
    10.0.0.1 10.1.0.2 s1
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h2
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.16.1.4/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    cat <<SCRIPT > /etc/netplan/04-routes-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          routes:
            - to: 172.16.0.0/16
              via: 172.16.1.2
            - to: 10.0.0.0/24
              via: 172.16.1.2
            - to: 10.1.0.0/16
              via: 172.16.1.2
            - to: 10.2.0.0/24
              via: 172.16.1.2
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.16.0.3
    ip host h2 172.16.1.4
    ip host ros 10.0.0.2 10.1.0.1
    ip host ros-tenant 172.16.0.2 172.16.1.2
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.1 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     no shutdown
     description s1 -> ros
     mtu 1600
     ip address 10.1.0.2 255.255.255.252
    !
    interface GigabitEthernet3
     no shutdown
    !
    interface GigabitEthernet4
     no shutdown
    !
    interface BDI1000
     no shutdown
     description VLAN red (1000) -> [h1,ros]
    !
    interface BDI1001
     no shutdown
     description VLAN blue (1001) -> [h2,ros]
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h2]
ok: [h1]
ok: [ros]
ok: [s1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for ros, s1
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux.yml for h1, h2

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s1]
changed: [ros]

TASK [template] ****************************************************************
changed: [h1]
changed: [h2]

TASK [Execute /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux.j2] ***
changed: [h2]
changed: [h1]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ros]
ok: [s1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vrf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vlan] ************************************
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    vlan configuration for ros
    =========================================
    !
    bridge-domain 1001
    !
    bridge-domain 1000
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    !
    bridge-domain 1001
     member GigabitEthernet4 service-instance 1001
    !
    bridge-domain 1000
     member GigabitEthernet3 service-instance 1000
    !
    interface GigabitEthernet3
     service instance 1000 ethernet
      encapsulation untagged
    !
    interface GigabitEthernet4
     service instance 1001 ethernet
      encapsulation untagged

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [ros]
ok: [s1]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for ros, s1

TASK [ios_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/csr.j2] ***
changed: [ros]
changed: [s1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [ros]
ok: [s1]

TASK [Find configuration template for ospf] ************************************
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    ospf configuration for ros
    =========================================
    router ospf 1
     router-id 10.0.0.2
  
    !
    interface Loopback0
    !
     ip ospf 1 area 0.0.0.0
    !
    interface GigabitEthernet2
    ! ros -> s1
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    router ospf 1
     router-id 10.0.0.1
  
    !
    interface Loopback0
    !
     ip ospf 1 area 0.0.0.0
    !
    interface GigabitEthernet2
    ! s1 -> ros
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [ros]
ok: [s1]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for ros, s1

TASK [ios_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/ios.j2] ***
changed: [ros]
changed: [s1]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vrf] *************************************
skipping: [s1]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
ok: [ros] => 
  msg: |-
    vrf configuration for ros
    =========================================
    router ospf 100 vrf tenant
     router-id 10.0.0.2
  
     redistribute connected subnets
    !
    interface BDI1000
    ! VLAN red (1000) -> [h1,s1]
     ip ospf 100 area 0.0.0.0
    !
    interface BDI1001
    ! VLAN blue (1001) -> [h2,s1]
     ip ospf 100 area 0.0.0.0
    !

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [s1]
ok: [ros]

TASK [Deploy vrf configuration] ************************************************
skipping: [s1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for ros

TASK [ios_config: deploying vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/ios.j2] ***
changed: [ros]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vxlan] ***********************************
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    vxlan configuration for ros
    =========================================
    interface nve1
     no shutdown
     source-interface Loopback0
     member vni 101000
      ingress-replication 10.0.0.1
     member vni 101001
      ingress-replication 10.0.0.1
    !
    bridge-domain 1000
     member vni 101000
    !
    bridge-domain 1001
     member vni 101001
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    interface nve1
     no shutdown
     source-interface Loopback0
     member vni 101000
      ingress-replication 10.0.0.2
     member vni 101001
      ingress-replication 10.0.0.2
    !
    bridge-domain 1000
     member vni 101000
    !
    bridge-domain 1001
     member vni 101001

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [ros]
ok: [s1]

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for ros, s1

TASK [ios_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/csr.j2] ***
changed: [s1]
changed: [ros]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
ros                        : ok=38   changed=5    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s1                         : ok=33   changed=4    unreachable=0    failed=0    skipped=5    rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN bridge and VXLAN router-on-a-stick.
Assuming 'vxlan-bridging' test case succeeded, this one tests VXLAN-to-VXLAN
routing

* h1 and h2 should be able to ping each other

