[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s3]
ok: [h1]
ok: [h2]
ok: [s1]
ok: [h4]
ok: [h3]
ok: [h5]
ok: [s2]
ok: [h6]

TASK [Find device readiness script] ********************************************
ok: [s3]
ok: [h1]
ok: [s1]
ok: [h2]
ok: [s2]
ok: [h4]
ok: [h3]
ok: [h5]
ok: [h6]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]
skipping: [h6]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, h1, h2, h3, h4, h5, h6

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [s3]
ok: [h1]
ok: [h2]
ok: [s1]
ok: [s2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Find configuration template for initial] *********************************
ok: [s3]
ok: [h1]
ok: [s1]
ok: [s2]
ok: [h2]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [h6]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s3] => 
  msg: |-
    initial configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "172.16.0.2 h1" >>/tmp/hosts
    echo "172.16.0.3 h2" >>/tmp/hosts
    echo "172.16.0.4 h3" >>/tmp/hosts
    echo "172.16.1.5 h4" >>/tmp/hosts
    echo "172.16.1.6 h5" >>/tmp/hosts
    echo "172.16.1.7 h6" >>/tmp/hosts
    echo "10.0.0.8 10.1.0.1 172.16.3.8 s1" >>/tmp/hosts
    echo "10.0.0.9 10.1.0.2 172.16.2.9 s2" >>/tmp/hosts
    echo "10.0.0.1 172.16.2.1 172.16.3.1 s3" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth3.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth4.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1600
    ip link set eth2 mtu 1600
    ip link set eth3 mtu 1500
    ip link set eth4 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname s3
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.1/32
    !
    interface eth1
     no shutdown
     description s3 -> s2
     ip address 172.16.2.1/24
    !
    interface eth2
     no shutdown
     description s3 -> s1
     ip address 172.16.3.1/24
    !
    interface eth3
     no shutdown
     ! no ip address
    !
    interface eth4
     no shutdown
     ! no ip address
    !
    interface vlan1000
     no shutdown
     description VLAN red (1000) -> [h3,h1,s1,h2,s2]
     ! no ip address
    !
    interface vlan1001
     no shutdown
     description VLAN blue (1001) -> [h6,h4,s1,h5,s2]
     ! no ip address
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.16.0.2
    ip host h2 172.16.0.3
    ip host h3 172.16.0.4
    ip host h4 172.16.1.5
    ip host h5 172.16.1.6
    ip host h6 172.16.1.7
    ip host s2 10.0.0.9 10.1.0.2 172.16.2.9
    ip host s3 10.0.0.1 172.16.2.1 172.16.3.1
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.8 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     no shutdown
     description s1 -> s2
     mtu 1600
     ip address 10.1.0.1 255.255.255.252
    !
    interface GigabitEthernet3
     no shutdown
     description s1 -> s3
     mtu 1600
     ip address 172.16.3.8 255.255.255.0
    !
    interface GigabitEthernet4
     no shutdown
    !
    interface GigabitEthernet5
     no shutdown
    !
    interface BDI1000
     no shutdown
     description VLAN red (1000) -> [h3,s3,h1,h2,s2]
    !
    interface BDI1001
     no shutdown
     description VLAN blue (1001) -> [h6,s3,h4,h5,s2]
    !
    no banner exec
    no banner login
    no banner incoming
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.16.0.2
    ip host h2 172.16.0.3
    ip host h3 172.16.0.4
    ip host h4 172.16.1.5
    ip host h5 172.16.1.6
    ip host h6 172.16.1.7
    ip host s1 10.0.0.8 10.1.0.1 172.16.3.8
    ip host s3 10.0.0.1 172.16.2.1 172.16.3.1
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.9 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     no shutdown
     description s2 -> s1
     mtu 1600
     ip address 10.1.0.2 255.255.255.252
    !
    interface GigabitEthernet3
     no shutdown
     description s2 -> s3
     mtu 1600
     ip address 172.16.2.9 255.255.255.0
    !
    interface GigabitEthernet4
     no shutdown
    !
    interface GigabitEthernet5
     no shutdown
    !
    interface BDI1000
     no shutdown
     description VLAN red (1000) -> [h3,s3,h1,s1,h2]
    !
    interface BDI1001
     no shutdown
     description VLAN blue (1001) -> [h6,s3,h4,s1,h5]
    !
    no banner exec
    no banner login
    no banner incoming
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.3/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.4/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.4/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.5/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.5/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h5] => 
  msg: |-
    initial configuration for h5
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.6/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.6/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h6] => 
  msg: |-
    initial configuration for h6
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.7/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.7/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [s3]
ok: [h1]
ok: [s1]
ok: [s2]
ok: [h2]
ok: [h3]
ok: [h6]
ok: [h4]
ok: [h5]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for s3
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/initial-clab.yml for h1, h2, h3, h4, h5, h6

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s2]
changed: [s1]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [s3 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [s3]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for s3

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [s3]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [s3]

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [h6]

TASK [Create initial container setup from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h3 -> localhost]
changed: [h6 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]

TASK [Initial container configuration via /tmp/config-giuBIZQm-h1.sh] **********
changed: [h3 -> localhost]
changed: [h6 -> localhost]
changed: [h1 -> localhost]
changed: [h5 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [file] ********************************************************************
changed: [h1 -> localhost]
changed: [h4 -> localhost]
changed: [h5 -> localhost]
changed: [h3 -> localhost]
changed: [h6 -> localhost]
changed: [h2 -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s3] => 
  msg: |-
    vlan configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
      brctl addbr vlan1000
      ip link set dev vlan1000 up
      ip addr flush dev vlan1000
    fi
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
      brctl addbr vlan1001
      ip link set dev vlan1001 up
      ip addr flush dev vlan1001
    fi
  
    brctl addif vlan1000 eth3
    brctl addif vlan1001 eth4
    exit 0
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    !
    bridge-domain 1001
     member GigabitEthernet5 service-instance 1001
    !
    bridge-domain 1000
     member GigabitEthernet4 service-instance 1000
    !
    interface GigabitEthernet4
     service instance 1000 ethernet
      encapsulation untagged
    !
    interface GigabitEthernet5
     service instance 1001 ethernet
      encapsulation untagged
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    !
    bridge-domain 1001
     member GigabitEthernet5 service-instance 1001
    !
    bridge-domain 1000
     member GigabitEthernet4 service-instance 1000
    !
    interface GigabitEthernet4
     service instance 1000 ethernet
      encapsulation untagged
    !
    interface GigabitEthernet5
     service instance 1001 ethernet
      encapsulation untagged

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s3

TASK [ios_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/csr.j2] ***
changed: [s1]
changed: [s2]

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
changed: [s3]

TASK [run vtysh to import vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/frr.j2] ***
skipping: [s3]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s3] => 
  msg: |-
    ospf configuration for s3
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 10.0.0.1
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
  
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! s3 -> s2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! s3 -> s1
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    router ospf 1
     router-id 10.0.0.8
  
    !
    interface Loopback0
    !
     ip ospf 1 area 0.0.0.0
    !
    interface GigabitEthernet2
    ! s1 -> s2
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
    interface GigabitEthernet3
    ! s1 -> s3
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    router ospf 1
     router-id 10.0.0.9
  
    !
    interface Loopback0
    !
     ip ospf 1 area 0.0.0.0
    !
    interface GigabitEthernet2
    ! s2 -> s1
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
    interface GigabitEthernet3
    ! s2 -> s3
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s3

TASK [ios_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/ios.j2] ***
changed: [s1]
changed: [s2]

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [s3]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [s3]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vxlan] ***********************************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    interface nve1
     no shutdown
     source-interface Loopback0
     member vni 1000
      ingress-replication 10.0.0.1
      ingress-replication 10.0.0.9
     member vni 1001
      ingress-replication 10.0.0.1
      ingress-replication 10.0.0.9
    !
    bridge-domain 1000
     member vni 1000
    !
    bridge-domain 1001
     member vni 1001
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    interface nve1
     no shutdown
     source-interface Loopback0
     member vni 1000
      ingress-replication 10.0.0.1
      ingress-replication 10.0.0.8
     member vni 1001
      ingress-replication 10.0.0.1
      ingress-replication 10.0.0.8
    !
    bridge-domain 1000
     member vni 1000
    !
    bridge-domain 1001
     member vni 1001
ok: [s3] => 
  msg: |-
    vxlan configuration for s3
    =========================================
    #!/bin/bash
    #
    set -e # Exit immediately when any command fails
    #
  
  
  
    # Determine max MTU used on interfaces, to configure VXLAN interface
  
    # Create L3 VNIs with bridges and add to correct vrf table
  
    # Create VXLAN L2 interface per vni
    ip link add vxlan1000 type vxlan \
      id 1000 \
      dstport 4789 \
      local 10.0.0.1
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1000 ]; then
    brctl addbr vlan1000
    ip link set up dev vlan1000
    fi
    brctl addif vlan1000 vxlan1000
    brctl stp vlan1000 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1600 addrgenmode none dev vxlan1000
    ip link set up dev vxlan1000
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan1000 dst 10.0.0.8
    bridge fdb append 00:00:00:00:00:00 dev vxlan1000 dst 10.0.0.9
    # Create VXLAN L2 interface per vni
    ip link add vxlan1001 type vxlan \
      id 1001 \
      dstport 4789 \
      local 10.0.0.1
    #
    # Add it to the VLAN bridge (create if needed for l3 vnis); disable STP
    if [ ! -e /sys/devices/virtual/net/vlan1001 ]; then
    brctl addbr vlan1001
    ip link set up dev vlan1001
    fi
    brctl addif vlan1001 vxlan1001
    brctl stp vlan1001 off
    # Do not generate ipv6 link-local address for VXLAN devices
    ip link set mtu 1600 addrgenmode none dev vxlan1001
    ip link set up dev vxlan1001
  
    bridge fdb append 00:00:00:00:00:00 dev vxlan1001 dst 10.0.0.8
    bridge fdb append 00:00:00:00:00:00 dev vxlan1001 dst 10.0.0.9
  
    exit $?

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for s3

TASK [ios_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/csr.j2] ***
fatal: [s2]: FAILED! => changed=false 
  module_stderr: |-
    ingress-replication 10.0.0.1
    ingress-replication 10.0.0.1
     ^
    % Invalid input detected at '^' marker.
  
    s2(config-if)#
  module_stdout: ''
  msg: |-
    MODULE FAILURE
    See stdout/stderr for the exact error
fatal: [s1]: FAILED! => changed=false 
  module_stderr: |-
    ingress-replication 10.0.0.1
    ingress-replication 10.0.0.1
     ^
    % Invalid input detected at '^' marker.
  
    s1(config-if)#
  module_stdout: ''
  msg: |-
    MODULE FAILURE
    See stdout/stderr for the exact error

TASK [template] ****************************************************************
changed: [s3]

TASK [set_fact] ****************************************************************
ok: [s3]

TASK [run /tmp/config.sh to deploy vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
changed: [s3]

TASK [run vtysh to import vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/frr.j2] ***
skipping: [s3]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h3                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h4                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h5                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h6                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s1                         : ok=30   changed=3    unreachable=0    failed=1    skipped=1    rescued=0    ignored=0   
s2                         : ok=30   changed=3    unreachable=0    failed=1    skipped=1    rescued=0    ignored=0   
s3                         : ok=41   changed=9    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   

Fatal error in netlab: Executing Ansible playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible failed
Error executing ansible-playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible:
  Command '['ansible-playbook', '/home/pipi/net101/tools/netsim/ansible/initial-config.ansible']' returned non-zero exit status 2.
