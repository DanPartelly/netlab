[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h5]
ok: [h4]
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [s1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [s2]
ok: [s3]

TASK [Wait for device to become ready] *****************************************
skipping: [s1]
skipping: [s2]
skipping: [s3]
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
skipping: [h5]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3, h1, h2, h3, h4, h5

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [s1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [s3]
ok: [s2]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [s1]
ok: [h2]
ok: [s2]
ok: [h3]
ok: [h4]
ok: [h5]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    hostname s1
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.31.1.1
    ip host h2 172.31.1.2
    ip host h3 172.31.1.3
    ip host h4 172.31.1.4
    ip host h5 172.31.1.5
    ip host s2 10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7
    ip host s3 10.0.0.8 10.1.0.6 10.1.0.10
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.6 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     no shutdown
     description s1 -> s2
     mtu 1600
     ip address 10.1.0.1 255.255.255.252
    !
    interface GigabitEthernet3
     no shutdown
     description s1 -> s3
     mtu 1600
     ip address 10.1.0.9 255.255.255.252
    !
    interface Loopback1
     no shutdown
     description s1 -> stub
     ip address 172.16.0.6 255.255.255.0
    !
    interface GigabitEthernet4
     no shutdown
    !
    interface GigabitEthernet5
     no shutdown
    !
    interface BDI1000
     no shutdown
     description VLAN red (1000) -> [h1,h2,s2,h3,s3]
    !
    interface BDI1001
     no shutdown
     description VLAN blue (1001) -> [h4,h5,s2]
    !
    no banner exec
    no banner login
    no banner incoming
ok: [s2] => 
  msg: |-
    initial configuration for s2
    =========================================
    hostname s2
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.31.1.1
    ip host h2 172.31.1.2
    ip host h3 172.31.1.3
    ip host h4 172.31.1.4
    ip host h5 172.31.1.5
    ip host s1 10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6
    ip host s3 10.0.0.8 10.1.0.6 10.1.0.10
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.7 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     no shutdown
     description s2 -> s1
     mtu 1600
     ip address 10.1.0.2 255.255.255.252
    !
    interface GigabitEthernet3
     no shutdown
     description s2 -> s3
     mtu 1600
     ip address 10.1.0.5 255.255.255.252
    !
    interface Loopback1
     no shutdown
     description s2 -> stub
     ip address 172.16.1.7 255.255.255.0
    !
    interface GigabitEthernet4
     no shutdown
    !
    interface GigabitEthernet5
     no shutdown
    !
    interface BDI1000
     no shutdown
     description VLAN red (1000) -> [h1,s1,h2,h3,s3]
    !
    interface BDI1001
     no shutdown
     description VLAN blue (1001) -> [h4,s1,h5]
    !
    no banner exec
    no banner login
    no banner incoming
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h1
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.31.1.1 h1
    172.31.1.2 h2
    172.31.1.3 h3
    172.31.1.4 h4
    172.31.1.5 h5
    10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6 s1
    10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7 s2
    10.0.0.8 10.1.0.6 10.1.0.10 s3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h1
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.31.1.1/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h2
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.31.1.1 h1
    172.31.1.2 h2
    172.31.1.3 h3
    172.31.1.4 h4
    172.31.1.5 h5
    10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6 s1
    10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7 s2
    10.0.0.8 10.1.0.6 10.1.0.10 s3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h2
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.31.1.2/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h3
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.31.1.1 h1
    172.31.1.2 h2
    172.31.1.3 h3
    172.31.1.4 h4
    172.31.1.5 h5
    10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6 s1
    10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7 s2
    10.0.0.8 10.1.0.6 10.1.0.10 s3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h3
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.31.1.3/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h4
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.31.1.1 h1
    172.31.1.2 h2
    172.31.1.3 h3
    172.31.1.4 h4
    172.31.1.5 h5
    10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6 s1
    10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7 s2
    10.0.0.8 10.1.0.6 10.1.0.10 s3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h4
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.31.1.4/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h5] => 
  msg: |-
    initial configuration for h5
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h5
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.31.1.1 h1
    172.31.1.2 h2
    172.31.1.3 h3
    172.31.1.4 h4
    172.31.1.5 h5
    10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6 s1
    10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7 s2
    10.0.0.8 10.1.0.6 10.1.0.10 s3
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h5
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.31.1.5/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [s3] => 
  msg: |-
    initial configuration for s3
    =========================================
    hostname s3
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host h1 172.31.1.1
    ip host h2 172.31.1.2
    ip host h3 172.31.1.3
    ip host h4 172.31.1.4
    ip host h5 172.31.1.5
    ip host s1 10.0.0.6 10.1.0.1 10.1.0.9 172.16.0.6
    ip host s2 10.0.0.7 10.1.0.2 10.1.0.5 172.16.1.7
    !
  
    !
    !
    interface Loopback0
     ip address 10.0.0.8 255.255.255.255
    !
    interface GigabitEthernet1
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet2
     no shutdown
     description s3 -> s2
     mtu 1600
     ip address 10.1.0.6 255.255.255.252
    !
    interface GigabitEthernet3
     no shutdown
     description s3 -> s1
     mtu 1600
     ip address 10.1.0.10 255.255.255.252
    !
    interface GigabitEthernet4
     no shutdown
    !
    interface BDI1000
     no shutdown
     description VLAN red (1000) -> [h1,s1,h2,s2,h3]
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [s1]
ok: [h2]
ok: [h5]
ok: [h3]
ok: [h4]
ok: [s2]
ok: [s3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2, s3
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux.yml for h1, h2, h3, h4, h5

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
[WARNING]: To ensure idempotency and correct diff the input configuration lines
should be similar to how they appear if present in the running configuration on
device including the indentation
changed: [s3]
changed: [s1]
changed: [s2]

TASK [template] ****************************************************************
changed: [h2]
changed: [h1]
changed: [h4]
changed: [h3]
changed: [h5]

TASK [Execute /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux.j2] ***
changed: [h2]
changed: [h5]
changed: [h1]
changed: [h3]
changed: [h4]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for s1, s2, s3 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Find configuration template for vlan] ************************************
ok: [s1]
ok: [s3]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    !
    bridge-domain 1001
     member GigabitEthernet5 service-instance 1001
    !
    bridge-domain 1000
     member GigabitEthernet4 service-instance 1000
    !
    interface GigabitEthernet4
     service instance 1000 ethernet
      encapsulation untagged
    !
    interface GigabitEthernet5
     service instance 1001 ethernet
      encapsulation untagged
ok: [s3] => 
  msg: |-
    vlan configuration for s3
    =========================================
    !
    bridge-domain 1000
     member GigabitEthernet4 service-instance 1000
    !
    interface GigabitEthernet4
     service instance 1000 ethernet
      encapsulation untagged
ok: [s2] => 
  msg: |-
    vlan configuration for s2
    =========================================
    !
    bridge-domain 1001
     member GigabitEthernet5 service-instance 1001
    !
    bridge-domain 1000
     member GigabitEthernet4 service-instance 1000
    !
    interface GigabitEthernet4
     service instance 1000 ethernet
      encapsulation untagged
    !
    interface GigabitEthernet5
     service instance 1001 ethernet
      encapsulation untagged

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [s3]
ok: [s1]
ok: [s2]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2, s3

TASK [ios_config: deploying vlan from /home/pipi/net101/tools/netsim/ansible/templates/vlan/csr.j2] ***
changed: [s3]
changed: [s2]
changed: [s1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [s1]
ok: [s3]
ok: [s2]

TASK [Find configuration template for ospf] ************************************
ok: [s1]
ok: [s3]
ok: [s2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    router ospf 1
     router-id 10.0.0.6
  
    !
    interface Loopback0
    !
     ip ospf 1 area 0.0.0.0
    !
    interface GigabitEthernet2
    ! s1 -> s2
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
    interface GigabitEthernet3
    ! s1 -> s3
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
    interface Loopback1
    ! s1 -> stub
     ip ospf 1 area 0.0.0.0
    !
ok: [s3] => 
  msg: |-
    ospf configuration for s3
    =========================================
    router ospf 1
     router-id 10.0.0.8
  
    !
    interface Loopback0
    !
     ip ospf 1 area 0.0.0.0
    !
    interface GigabitEthernet2
    ! s3 -> s2
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
    interface GigabitEthernet3
    ! s3 -> s1
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
ok: [s2] => 
  msg: |-
    ospf configuration for s2
    =========================================
    router ospf 1
     router-id 10.0.0.7
  
    !
    interface Loopback0
    !
     ip ospf 1 area 0.0.0.0
    !
    interface GigabitEthernet2
    ! s2 -> s1
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
    interface GigabitEthernet3
    ! s2 -> s3
     ip ospf 1 area 0.0.0.0
     ip ospf network point-to-point
    !
    interface Loopback1
    ! s2 -> stub
     ip ospf 1 area 0.0.0.0
    !

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [s1]
ok: [s3]
ok: [s2]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2, s3

TASK [ios_config: deploying ospf from /home/pipi/net101/tools/netsim/ansible/templates/ospf/ios.j2] ***
changed: [s3]
changed: [s1]
changed: [s2]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Find configuration template for vxlan] ***********************************
ok: [s1]
ok: [s2]
ok: [s3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    interface nve1
     no shutdown
     source-interface Loopback1
     member vni 101000
      ingress-replication 172.16.1.7
      ingress-replication 10.0.0.8
     member vni 101001
      ingress-replication 172.16.1.7
    !
    bridge-domain 1000
     member vni 101000
    !
    bridge-domain 1001
     member vni 101001
ok: [s2] => 
  msg: |-
    vxlan configuration for s2
    =========================================
    interface nve1
     no shutdown
     source-interface Loopback1
     member vni 101000
      ingress-replication 172.16.0.6
      ingress-replication 10.0.0.8
     member vni 101001
      ingress-replication 172.16.0.6
    !
    bridge-domain 1000
     member vni 101000
    !
    bridge-domain 1001
     member vni 101001
ok: [s3] => 
  msg: |-
    vxlan configuration for s3
    =========================================
    interface nve1
     no shutdown
     source-interface Loopback0
     member vni 101000
      ingress-replication 172.16.0.6
      ingress-replication 172.16.1.7
    !
    bridge-domain 1000
     member vni 101000

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [s1]
ok: [s3]
ok: [s2]

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for s1, s2, s3

TASK [ios_config: deploying vxlan from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/csr.j2] ***
changed: [s3]
changed: [s2]
changed: [s1]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h3                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h4                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h5                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s1                         : ok=31   changed=4    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s2                         : ok=31   changed=4    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
s3                         : ok=31   changed=4    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   



This scenario (similar to vxlan-bridging) tests device
support for alternate VTEP endpoints.

* h1, h2 and h3 should be able to ping each other
* h4 and h5 should be able to ping each other

Please note it might take a while for the lab to work due to
STP learning phase

