[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Find device readiness script] ********************************************
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, xf, p1, p2

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p1] => 
  msg: |-
    initial configuration for p1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "2001:db8:1:1::1 dut" >>/tmp/hosts
    echo "2001:db8:2::1 dut-d1" >>/tmp/hosts
    echo "2001:db8:2:1::1 2001:db8:2:2::1 2001:db8:cafe:43::1 dut-d2" >>/tmp/hosts
    echo "2001:db8:1:2::1 2001:db8:2::2 p1" >>/tmp/hosts
    echo "2001:db8:1:3::1 2001:db8:2:1::3 p2" >>/tmp/hosts
    echo "2001:db8:1:4::1 2001:db8:2:2::4 xf" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p1
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:2::1/64
    !
    interface eth1
     no shutdown
     description p1 -> dut
     ! no ip address
     ipv6 address 2001:db8:2::2/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [xf] => 
  msg: |-
    initial configuration for xf
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "2001:db8:1:1::1 dut" >>/tmp/hosts
    echo "2001:db8:2::1 dut-d1" >>/tmp/hosts
    echo "2001:db8:2:1::1 2001:db8:2:2::1 2001:db8:cafe:43::1 dut-d2" >>/tmp/hosts
    echo "2001:db8:1:2::1 2001:db8:2::2 p1" >>/tmp/hosts
    echo "2001:db8:1:3::1 2001:db8:2:1::3 p2" >>/tmp/hosts
    echo "2001:db8:1:4::1 2001:db8:2:2::4 xf" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname xf
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:4::1/64
    !
    interface eth1
     no shutdown
     description xf -> dut [external]
     ! no ip address
     ipv6 address 2001:db8:2:2::4/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "2001:db8:1:1::1 dut" >>/tmp/hosts
    echo "2001:db8:2::1 dut-d1" >>/tmp/hosts
    echo "2001:db8:2:1::1 2001:db8:2:2::1 2001:db8:cafe:43::1 dut-d2" >>/tmp/hosts
    echo "2001:db8:1:2::1 2001:db8:2::2 p1" >>/tmp/hosts
    echo "2001:db8:1:3::1 2001:db8:2:1::3 p2" >>/tmp/hosts
    echo "2001:db8:1:4::1 2001:db8:2:2::4 xf" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    vrf mgmt
     exit-vrf
    !
    ipv6 forwarding
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ! no ip address
     ipv6 address 2001:db8:1:3::1/64
    !
    interface eth1
     no shutdown
     description p2 -> dut
     ! no ip address
     ipv6 address 2001:db8:2:1::3/64
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
    hostname dut
    !
    no ip domain lookup
    !
    lldp run
    !
    ip host dut-d1
    ip host dut-d2
    ip host p1
    ip host p2
    ip host xf
    !
    ipv6 unicast-routing
    !
    vrf definition d1
     rd 65000:1
     route-target import 65000:1
     route-target export 65000:1
    !
     address-family ipv6
     exit-address-family
    !
    vrf definition d2
     rd 65000:2
     route-target import 65000:2
     route-target export 65000:2
    !
     address-family ipv6
     exit-address-family
    !
  
    !
    !
    interface Loopback0
     ipv6 address 2001:DB8:1:1::1/64
    !
    interface GigabitEthernet0/0
     no lldp transmit
     no lldp receive
    !
    interface GigabitEthernet0/1
     no shutdown
     no switchport
     vrf forwarding d1
     description dut -> p1
     ipv6 address 2001:DB8:2::1/64
    !
    interface GigabitEthernet0/2
     no shutdown
     no switchport
     vrf forwarding d2
     description dut -> p2
     ipv6 address 2001:DB8:2:1::1/64
    !
    interface GigabitEthernet0/3
     no shutdown
     no switchport
     vrf forwarding d2
     description dut -> xf [external]
     ipv6 address 2001:DB8:2:2::1/64
    !
    interface Loopback1
     no shutdown
     vrf forwarding d2
     description VRF Loopback d2
     ipv6 address 2001:DB8:CAFE:43::1/64
    !
    no banner exec
    no banner login
    no banner incoming

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [xf]
ok: [p1]
ok: [p2]
ok: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/ios.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for xf, p1, p2

TASK [ios_config: deploying initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/ios.j2] ***
fatal: [dut]: FAILED! => changed=false 
  module_stderr: |-
    ip host dut-d1
    ip host dut-d1
    % Incomplete command.
  
    dut(config)#
  module_stdout: ''
  msg: |-
    MODULE FAILURE
    See stdout/stderr for the exact error

TASK [Attempt to load VRF kernel module] ***************************************
changed: [p2 -> localhost]
changed: [p1 -> localhost]
changed: [xf -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [xf]
skipping: [p1]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for xf, p1, p2

TASK [template] ****************************************************************
changed: [p1]
changed: [xf]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [xf]
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [p2]
changed: [p1]
changed: [xf]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [xf]
skipping: [p1]
skipping: [p2]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [p1]
ok: [p2]
ok: [xf]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for p1, p2, xf => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for p1, p2, xf => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for p1, p2, xf => (item=vrf)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [p1]
ok: [p2]
ok: [xf]

TASK [Find configuration template for bgp] *************************************
skipping: [p1]
skipping: [p2]
ok: [xf]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
ok: [xf] => 
  msg: |-
    bgp configuration for xf
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.4
    !
      neighbor 2001:db8:2:2::1 remote-as 65000
      neighbor 2001:db8:2:2::1 description dut
    !
     address-family ipv6 unicast
    !
      network 2001:db8:1:4::/64
    !
    !
    !
      neighbor 2001:db8:2:2::1 activate
      no neighbor 2001:db8:2:2::1 send-community all
      neighbor 2001:db8:2:2::1 send-community standard
      neighbor 2001:db8:2:2::1 send-community large
    !
    !
    !
    do write

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [p1]
skipping: [p2]
ok: [xf]

TASK [Deploy bgp configuration] ************************************************
skipping: [p1]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for xf

TASK [template] ****************************************************************
changed: [xf]

TASK [set_fact] ****************************************************************
ok: [xf]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [xf]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [xf]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [p1]
ok: [p2]
ok: [xf]

TASK [Find configuration template for ospf] ************************************
skipping: [xf]
ok: [p1]
ok: [p2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [xf]
ok: [p1] => 
  msg: |-
    ospf configuration for p1
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! p1 -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.2
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
    exit
  
    !
    do write
ok: [p2] => 
  msg: |-
    ospf configuration for p2
    =========================================
    !
    ! OSPFv3 FRR configuration
    !
    interface lo
    !
     ipv6 ospf6 area 0.0.0.0
    !
    interface eth1
    ! p2 -> dut
     ipv6 ospf6 area 0.0.0.0
     ipv6 ospf6 network point-to-point
    !
    !
    router ospf6
     ospf6 router-id 10.0.0.3
     timers lsa min-arrival 100
     timers throttle spf 10 50 500
  
    exit
  
    !
    do write

TASK [Find configuration deployment deploy_script for ospf] ********************
skipping: [xf]
ok: [p1]
ok: [p2]

TASK [Deploy ospf configuration] ***********************************************
skipping: [xf]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p1, p2

TASK [template] ****************************************************************
changed: [p2]
changed: [p1]

TASK [set_fact] ****************************************************************
ok: [p1]
ok: [p2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [p1]
skipping: [p2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [p1]
changed: [p2]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [p1]
ok: [p2]
ok: [xf]

TASK [Find configuration template for vrf] *************************************
skipping: [p1]
skipping: [p2]
skipping: [xf]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [p1]
skipping: [p2]
skipping: [xf]

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [p1]
skipping: [p2]
skipping: [xf]

TASK [Deploy vrf configuration] ************************************************
skipping: [p1]
skipping: [p2]
skipping: [xf]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=8    changed=0    unreachable=0    failed=1    skipped=1    rescued=0    ignored=0   
p1                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
p2                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   
xf                         : ok=27   changed=5    unreachable=0    failed=0    skipped=12   rescued=0    ignored=0   

Fatal error in netlab: Executing Ansible playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible failed
Error executing ansible-playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible:
  Command '['ansible-playbook', '/home/pipi/net101/tools/netsim/ansible/initial-config.ansible']' returned non-zero exit status 2.
