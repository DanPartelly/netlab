[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [rtr]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [rtr]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [h3]
skipping: [h4]
included: /home/pipi/net101/tools/netsim/ansible/tasks/readiness-check/routeros7.yml for rtr

TASK [Execute local ssh command to check router readiness] *********************
skipping: [rtr]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, h3, h4, rtr

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [rtr]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [rtr]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2::1/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2::1/64 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:2::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:2::2/64 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h3] => 
  msg: |-
    initial configuration for h3
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:1::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:1::3/64 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [h4] => 
  msg: |-
    initial configuration for h4
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:2:3::4/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:2:3::4/64 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    #
    # Print the final routing table
    ip route
ok: [rtr] => 
  msg: |-
    initial configuration for rtr
    =========================================
  
    /system identity set name="rtr"
  
    /interface bridge add name=loopback protocol-mode=none
  
  
    /ipv6 address add interface=loopback address=2001:db8:1:5::1/64
  
  
  
  
  
  
    /ip/vrf/add place-before=0 name=blue interfaces=ether4,ether5
  
  
  
  
  
    /ip/vrf/add place-before=0 name=red interfaces=ether2,ether3
  
  
  
    /interface ethernet set comment="rtr -> h1 [stub]" ether2
  
  
    /ipv6 address add interface=ether2 address=2001:db8:2::5/64
    /ipv6 nd add interface=ether2 advertise-dns=no ra-interval=3s-30s
  
  
    /interface ethernet set comment="rtr -> h3 [stub]" ether3
  
  
    /ipv6 address add interface=ether3 address=2001:db8:2:1::5/64
    /ipv6 nd add interface=ether3 advertise-dns=no ra-interval=3s-30s
  
  
    /interface ethernet set comment="rtr -> h2 [stub]" ether4
  
  
    /ipv6 address add interface=ether4 address=2001:db8:2:2::5/64
    /ipv6 nd add interface=ether4 advertise-dns=no ra-interval=3s-30s
  
  
    /interface ethernet set comment="rtr -> h4 [stub]" ether5
  
  
    /ipv6 address add interface=ether5 address=2001:db8:2:3::5/64
    /ipv6 nd add interface=ether5 advertise-dns=no ra-interval=3s-30s
  
  
    /ip neighbor discovery-settings set discover-interface-list=all

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]
ok: [rtr]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/initial-clab.yml for h1, h2, h3, h4
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for rtr

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]
ok: [h3]
ok: [h4]

TASK [Create initial container setup from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]
changed: [h4 -> localhost]

TASK [Initial container configuration via /tmp/config-SyrmuiRI-h1.sh] **********
changed: [h1 -> localhost]
changed: [h3 -> localhost]
changed: [h4 -> localhost]
changed: [h2 -> localhost]

TASK [file] ********************************************************************
changed: [h4 -> localhost]
changed: [h3 -> localhost]
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [load initial from /home/pipi/net101/tools/netsim/ansible/templates/initial/routeros7.j2] ***
ok: [rtr]

TASK [Run commands on CHR] *****************************************************
changed: [rtr]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [rtr]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for rtr => (item=vrf)

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [rtr]

TASK [Find configuration template for vrf] *************************************
ok: [rtr]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [rtr] => 
  msg: |-
    vrf configuration for rtr
    =========================================

TASK [Find configuration deployment deploy_script for vrf] *********************
ok: [rtr]

TASK [Deploy vrf configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/routeros7.yml for rtr

TASK [load vrf from /home/pipi/net101/tools/netsim/ansible/templates/vrf/routeros7.j2] ***
ok: [rtr]

TASK [Run commands on CHR] *****************************************************
changed: [rtr]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h3                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h4                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
rtr                        : ok=20   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   



The lab tests the basic VRF lite functionality in an IPv6-only environment.
The device under test has two VRFs with two interfaces in each VRF.

* h1 and h2 should be able to ping each other
* h3 and h4 should be able to ping each other
* h1 should not be able to reach h3

