[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [r]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [r]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [r]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, r

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [r]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [r]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.2/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:1::2/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:1::2/64 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.0.1
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.0.1
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.0.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.0.1
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.0.1
    #
    # Print the final routing table
    ip route
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.3/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.3/24 dev eth1
    sysctl -w net.ipv6.conf.eth1.disable_ipv6=0
    set +e
    ip -6 addr del 2001:db8:1:1::3/64 dev eth1 2>/dev/null
    set -e
    ip -6 addr add 2001:db8:1:1::3/64 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.1.1
    # loopback prefix: 10.0.0.0/24 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.0.0.0/24 2>/dev/null
    set -e
    ip route add 10.0.0.0/24 via 172.16.1.1
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.1.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.1.1
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.1.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.1.1
    #
    # Print the final routing table
    ip route
ok: [r] => 
  msg: |-
    initial configuration for r
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)# "
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    cat <<SCRIPT >.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    echo "Use sudo vtysh to connect to FRR daemon"
    echo
    SCRIPT
  
    #
    # Build hosts file
    #
    hostname r
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.16.0.2 2001:db8:1::2 h1
    172.16.1.3 2001:db8:1:1::3 h2
    10.0.0.1 172.16.0.1 172.16.1.1 10.2.0.1 2001:db8:0:1::1 2001:db8:1::1 2001:db8:1:1::1 2001:db8:cafe::1 r
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    #
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    #
    # Configure interfaces
    #
    config hostname r
    if ip link|grep Loopback0; then
      echo Loopback0 already exists
    else
      config loopback add Loopback0
    fi
    if show ip interface|grep Loopback0|grep 10.0.0.1/32; then
      echo 10.0.0.1/32 already configured on Loopback0
    else
      config interface ip add Loopback0 10.0.0.1/32
    fi
    if show ipv6 interface|grep Loopback0|grep 2001:db8:0:1::1/64; then
      echo 2001:db8:0:1::1/64 already configured on Loopback0
    else
      config interface ip add Loopback0 2001:db8:0:1::1/64
    fi
    !
    if show ip interface|grep Ethernet0|grep 172.16.0.1/24; then
      echo 172.16.0.1/24 already configured on Ethernet0
    else
      config interface ip add Ethernet0 172.16.0.1/24
    fi
    config interface ipv6 enable use-link-local-only Ethernet0
    if show ipv6 interface|grep Ethernet0|grep 2001:db8:1::1/64; then
      echo 2001:db8:1::1/64 already configured on Ethernet0
    else
      config interface ip add Ethernet0 2001:db8:1::1/64
    fi
    config interface mtu Ethernet0 1548
    !
    if show ip interface|grep Ethernet4|grep 172.16.1.1/24; then
      echo 172.16.1.1/24 already configured on Ethernet4
    else
      config interface ip add Ethernet4 172.16.1.1/24
    fi
    config interface ipv6 enable use-link-local-only Ethernet4
    if show ipv6 interface|grep Ethernet4|grep 2001:db8:1:1::1/64; then
      echo 2001:db8:1:1::1/64 already configured on Ethernet4
    else
      config interface ip add Ethernet4 2001:db8:1:1::1/64
    fi
    config interface mtu Ethernet4 1548
    !
    if ip link|grep Loopback1; then
      echo Loopback1 already exists
    else
      config loopback add Loopback1
    fi
    if show ip interface|grep Loopback1|grep 10.2.0.1/32; then
      echo 10.2.0.1/32 already configured on Loopback1
    else
      config interface ip add Loopback1 10.2.0.1/32
    fi
    if show ipv6 interface|grep Loopback1|grep 2001:db8:cafe::1/64; then
      echo 2001:db8:cafe::1/64 already configured on Loopback1
    else
      config interface ip add Loopback1 2001:db8:cafe::1/64
    fi
    !
    #
    # Rest of initial configuration done through VTYSH
    # Make sure it's ready
    #
    if vtysh -c 'show running' >/dev/null; then
      echo vtysh is ready
    else
      echo 'giving vtysh some more time :('
      sleep 5
    fi
    #
    # And now let's configure the interfaces
    #
    cat >/etc/sonic/frr/do_config <<CONFIG
    hostname r
    !
    ipv6 forwarding
    !
    interface Loopback0
     no shutdown
    !
    interface Ethernet0
     no shutdown
     description r -> h1 [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface Ethernet4
     no shutdown
     description r -> h2 [stub]
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    interface Loopback1
     no shutdown
     description r -> stub
    !
    do write
    CONFIG
    docker exec bgp vtysh -f /etc/frr/do_config
    exit 0

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h1]
ok: [h2]
ok: [r]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/initial-clab.yml for h1, h2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/sonic.yml for r

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]

TASK [Create initial container setup from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Initial container configuration via /tmp/config-cQNmmwdn-h1.sh] **********
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [file] ********************************************************************
changed: [h2 -> localhost]
changed: [h1 -> localhost]

TASK [template] ****************************************************************
changed: [r]

TASK [set_fact] ****************************************************************
ok: [r]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/sonic.j2] ***
changed: [r]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/sonic.j2] ***
skipping: [r]

PLAY [Deploy module-specific configurations] ***********************************
skipping: no hosts matched

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
r                          : ok=11   changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0   



This scenario tests additional loopback interfaces
