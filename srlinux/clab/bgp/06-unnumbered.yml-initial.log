[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find device readiness script] ********************************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Wait for device to become ready] *****************************************
skipping: [dut]
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for initial] *********************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    updates:
    - path: system/mtu
      val:
       default-port-mtu: 1514
       default-l2-mtu: 1514
       default-ip-mtu: 1500
       _annotate_default-ip-mtu: "Custom system wide setting, overrides default 1500"
  
    - path: interface[name=system0]/subinterface[index=0]
      val:
       description: "No description"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.0.0.1/32"
  
  
    - path: interface[name=ethernet-1/1]
      val:
       subinterface:
        index: 0
        description: "dut ~ x1"
  
    - path: interface[name=ethernet-1/1]/subinterface[index=0]
      val:
       description: "dut ~ x1"
       ipv4:
        admin-state: enable
        unnumbered:
          admin-state: enable
          interface: "system0.0"
       ipv6:
        admin-state: enable
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
    - path: interface[name=ethernet-1/2]
      val:
       subinterface:
        index: 0
        description: "dut ~ x2"
  
    - path: interface[name=ethernet-1/2]/subinterface[index=0]
      val:
       description: "dut ~ x2"
       ipv4:
        admin-state: enable
        unnumbered:
          admin-state: enable
          interface: "system0.0"
       ipv6:
        admin-state: enable
        neighbor-discovery:
         learn-unsolicited: link-local
        router-advertisement:
         router-role:
          admin-state: enable             # no ipv6 nd suppress-ra
          min-advertisement-interval: 4   # Leaving this at platform default 200..600 takes too long at startup
          _annotate_min-advertisement-interval: "Reduced from platform default 200s"
          max-advertisement-interval: 5
  
    - path: interface[name=ethernet-1/3]
      val:
       subinterface:
        index: 0
        description: "dut ~ x3"
  
    - path: interface[name=ethernet-1/3]/subinterface[index=0]
      val:
       description: "dut ~ x3"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.1/30"
          primary: [null]
  
  
  
    - path: network-instance[name=default]
      val:
       type: default
       interface:
       - name: system0.0
  
    - path: network-instance[name=default]
      val:
       type: default
       interface:
       - name: ethernet-1/1.0
    - path: network-instance[name=default]
      val:
       type: default
       interface:
       - name: ethernet-1/2.0
    - path: network-instance[name=default]
      val:
       type: default
       interface:
       - name: ethernet-1/3.0
ok: [x1] => 
  msg: |-
    initial configuration for x1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "10.0.0.1 10.1.0.1 dut" >>/tmp/hosts
    echo "10.0.0.2 x1" >>/tmp/hosts
    echo "172.42.42.1 x2" >>/tmp/hosts
    echo "172.42.43.1 10.1.0.2 x3" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 10.0.0.2/32
    !
    interface eth1
     no shutdown
     description x1 -> dut [external]
     ip address 10.0.0.2/32
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x2] => 
  msg: |-
    initial configuration for x2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "10.0.0.1 10.1.0.1 dut" >>/tmp/hosts
    echo "10.0.0.2 x1" >>/tmp/hosts
    echo "172.42.42.1 x2" >>/tmp/hosts
    echo "172.42.43.1 10.1.0.2 x3" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.autoconf=0
    sysctl -qw net.ipv6.conf.eth1.accept_ra=0
    ip link set eth1 down
    ip link set eth1 up
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 172.42.42.1/24
    !
    interface eth1
     no shutdown
     description x2 -> dut [external]
     ip address 172.42.42.1/24
     ipv6 nd ra-interval 5
     no ipv6 nd suppress-ra
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [x3] => 
  msg: |-
    initial configuration for x3
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "10.0.0.1 10.1.0.1 dut" >>/tmp/hosts
    echo "10.0.0.2 x1" >>/tmp/hosts
    echo "172.42.42.1 x2" >>/tmp/hosts
    echo "172.42.43.1 10.1.0.2 x3" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname x3
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 172.42.43.1/24
    !
    interface eth1
     no shutdown
     description x3 -> dut [external]
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for x1, x2, x3

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [Generated gNMI config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/srlinux.j2] ***
skipping: [dut]

TASK [Update SRL initial node configuration (gNMI SET template=/home/pipi/net101/tools/netsim/ansible/templates/initial/srlinux.j2,CA=/work/netlab_cicd/clab-ml_17/.tls/ca/ca.pem)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [Attempt to load VRF kernel module] ***************************************
changed: [x2 -> localhost]
changed: [x3 -> localhost]
changed: [x1 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for x1, x2, x3

TASK [template] ****************************************************************
changed: [x1]
changed: [x2]
changed: [x3]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [x3]
changed: [x2]
changed: [x1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [x1]
skipping: [x2]
skipping: [x3]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, x1, x2, x3 => (item=bgp)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Find configuration template for bgp] *************************************
ok: [dut]
ok: [x1]
ok: [x2]
ok: [x3]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [x1] => 
  msg: |-
    bgp configuration for x1
    =========================================
    !
    router bgp 65100
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 10.0.0.2
    !
      neighbor eth1 interface remote-as 65000
      neighbor eth1 description dut
    !
     address-family ipv4 unicast
    !
      network 10.0.0.2/32
    !
    !
    !
      neighbor eth1 activate
      no neighbor eth1 send-community all
      neighbor eth1 send-community standard
      neighbor eth1 send-community large
    !
    !
    !
    do write
ok: [x3] => 
  msg: |-
    bgp configuration for x3
    =========================================
    !
    router bgp 65102
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 172.42.43.1
    !
      neighbor 10.1.0.1 remote-as 65000
      neighbor 10.1.0.1 description dut
    !
     address-family ipv4 unicast
    !
      network 172.42.43.0/24
    !
    !
    !
      neighbor 10.1.0.1 activate
      no neighbor 10.1.0.1 send-community all
      neighbor 10.1.0.1 send-community standard
      neighbor 10.1.0.1 send-community large
    !
    !
    !
    do write
ok: [dut] => 
  msg: |-
    bgp configuration for dut
    =========================================
    updates:
  
    - path: routing-policy/policy[name=accept_all]
      val:
       default-action:
        policy-result: "accept"
  
    - path: routing-policy/policy[name=next_hop_self_ebgp_ipv4]
      val:
       default-action:
        policy-result: "accept"
       statement:
       - name: set-nh-on-ebgp-routes
         match:
          protocol: bgp
          bgp:
           as-path-length:
            value: 1
            operator: "ge"
         action:
          policy-result: "accept"
          bgp:
           next-hop:
            set: "10.0.0.1"
  
    - path: network-instance[name=default]/protocols/bgp
      val:
       admin-state: enable
       autonomous-system: 65000
       router-id: 10.0.0.1
       ebgp-default-policy:
        export-reject-all: False
        import-reject-all: False
  
       afi-safi:
       - afi-safi-name: ipv4-unicast
         admin-state: enable
         multipath:
          max-paths-level-1: 64
          max-paths-level-2: 64 # indirect nexthops
  
    - path: routing-policy/prefix-set[name=default_export]
      val:
       prefix: [] # Make sure it exists
  
    - path: routing-policy/policy[name=default_export]
      val:
       default-action:
        policy-result: reject
       statement:
       - name: prefixes
         match:
          prefix-set: default_export
         action:
          policy-result: accept
       - name: bgp
         match:
          protocol: bgp
         action:
          policy-result: accept
  
    - path: routing-policy/prefix-set[name=default_export]
      val:
       prefix:
       - ip-prefix: 10.0.0.1/32
         mask-length-range: exact
  
  
  
  
  
  
  
  
    - path: network-instance[name=default]/protocols/bgp/group[group-name=ebgp-unnumbered]
      val:
       admin-state: enable
       afi-safi:
       - afi-safi-name: ipv4-unicast
         admin-state: enable
         ipv4-unicast:
          advertise-ipv6-next-hops: True
          receive-ipv6-next-hops: True
       - afi-safi-name: ipv6-unicast
         admin-state: disable
  
       timers:
        connect-retry: 10
        _annotate_connect-retry: "Reduce default 120s to 10s"
        minimum-advertisement-interval: 1
       send-community:
        standard: True
        large: True
        _annotate_large: "Assuming 'standard' implies 'large' here"
       import-policy: accept_all
       export-policy: default_export
  
  
    - path: network-instance[name=default]/ip-forwarding
      val:
       receive-ipv4-check: false
       _annotate_receive-ipv4-check: "Allow IPv4 on IPv6 unnumbered interfaces"
  
    - path: network-instance[name=default]/protocols/bgp/dynamic-neighbors/interface[interface-name=ethernet-1/1.0]
      val:
       peer-group: "ebgp-unnumbered"
       allowed-peer-as: [ 65100..65100 ]
  
  
  
    - path: network-instance[name=default]/protocols/bgp/group[group-name=ebgp-unnumbered]
      val:
       admin-state: enable
       afi-safi:
       - afi-safi-name: ipv4-unicast
         admin-state: enable
         ipv4-unicast:
          advertise-ipv6-next-hops: True
          receive-ipv6-next-hops: True
       - afi-safi-name: ipv6-unicast
         admin-state: disable
  
       timers:
        connect-retry: 10
        _annotate_connect-retry: "Reduce default 120s to 10s"
        minimum-advertisement-interval: 1
       send-community:
        standard: True
        large: True
        _annotate_large: "Assuming 'standard' implies 'large' here"
       import-policy: accept_all
       export-policy: default_export
  
  
    - path: network-instance[name=default]/ip-forwarding
      val:
       receive-ipv4-check: false
       _annotate_receive-ipv4-check: "Allow IPv4 on IPv6 unnumbered interfaces"
  
    - path: network-instance[name=default]/protocols/bgp/dynamic-neighbors/interface[interface-name=ethernet-1/2.0]
      val:
       peer-group: "ebgp-unnumbered"
       allowed-peer-as: [ 65101..65101 ]
  
  
    - path: network-instance[name=default]/protocols/bgp/group[group-name=ebgp]
      val:
       admin-state: enable
       afi-safi:
       - afi-safi-name: ipv4-unicast
         admin-state: enable
       - afi-safi-name: ipv6-unicast
         admin-state: disable
  
       timers:
        connect-retry: 10
        _annotate_connect-retry: "Reduce default 120s to 10s"
        minimum-advertisement-interval: 1
       send-community:
        standard: True
        large: True
        _annotate_large: "Assuming 'standard' implies 'large' here"
       import-policy: accept_all
       export-policy: default_export
  
  
    - path: network-instance[name=default]/protocols/bgp
      val:
       neighbor:
       - peer-address: "10.1.0.2"
         description: x3
         peer-group: ebgp
         afi-safi:
         - afi-safi-name: ipv4-unicast
           admin-state: enable
         - afi-safi-name: ipv6-unicast
           admin-state: disable
  
         peer-as: 65102
ok: [x2] => 
  msg: |-
    bgp configuration for x2
    =========================================
    !
    router bgp 65101
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 172.42.42.1
    !
      neighbor eth1 interface remote-as 65000
      neighbor eth1 description dut
    !
     address-family ipv4 unicast
    !
      network 172.42.42.0/24
    !
    !
    !
      neighbor eth1 activate
      no neighbor eth1 send-community all
      neighbor eth1 send-community standard
      neighbor eth1 send-community large
    !
    !
    !
    do write

TASK [Find configuration deployment deploy_script for bgp] *********************
ok: [dut]
ok: [x1]
ok: [x3]
ok: [x2]

TASK [Deploy bgp configuration] ************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for x1, x2, x3

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
skipping: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [Generated gNMI config based on /home/pipi/net101/tools/netsim/ansible/templates/bgp/srlinux.j2] ***
skipping: [dut]

TASK [Update SRL bgp node configuration (gNMI SET template=/home/pipi/net101/tools/netsim/ansible/templates/bgp/srlinux.j2,CA=/work/netlab_cicd/clab-ml_17/.tls/ca/ca.pem)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [x1]
changed: [x2]
changed: [x3]

TASK [set_fact] ****************************************************************
ok: [x1]
ok: [x2]
ok: [x3]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [x1]
skipping: [x2]
skipping: [x3]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [x1]
changed: [x2]
changed: [x3]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=24   changed=8    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
x1                         : ok=23   changed=5    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
x2                         : ok=23   changed=5    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   
x3                         : ok=23   changed=5    unreachable=0    failed=0    skipped=4    rescued=0    ignored=0   



Use this topology to test the unnumbered IPv4 EBGP implementation and
propagation of routes between EBGP speakers.

