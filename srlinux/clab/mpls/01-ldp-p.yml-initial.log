[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [pe1]
ok: [p2]
ok: [pe2]
ok: [h1]
ok: [dut]
ok: [h2]

TASK [Find device readiness script] ********************************************
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [h2]
ok: [h1]
ok: [dut]

TASK [Wait for device to become ready] *****************************************
skipping: [pe1]
skipping: [pe2]
skipping: [p2]
skipping: [h1]
skipping: [h2]
skipping: [dut]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for pe1, pe2, p2, h1, h2, dut

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [h2]
ok: [h1]
ok: [dut]

TASK [Find configuration template for initial] *********************************
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [h1]
ok: [h2]
ok: [dut]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [pe1] => 
  msg: |-
    initial configuration for pe1
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "172.31.0.5 10.1.0.1 10.1.0.5 dut" >>/tmp/hosts
    echo "172.16.0.1 h1" >>/tmp/hosts
    echo "172.16.1.2 h2" >>/tmp/hosts
    echo "172.31.0.6 10.1.0.6 10.1.0.9 p2" >>/tmp/hosts
    echo "172.31.0.3 172.16.0.3 10.1.0.2 pe1" >>/tmp/hosts
    echo "172.31.0.4 10.1.0.10 172.16.1.4 pe2" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe1
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 172.31.0.3/32
    !
    interface eth1
     no shutdown
     description pe1 -> h1 [stub]
     ip address 172.16.0.3/24
    !
    interface eth2
     no shutdown
     description pe1 -> dut
     ip address 10.1.0.2/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [pe2] => 
  msg: |-
    initial configuration for pe2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "172.31.0.5 10.1.0.1 10.1.0.5 dut" >>/tmp/hosts
    echo "172.16.0.1 h1" >>/tmp/hosts
    echo "172.16.1.2 h2" >>/tmp/hosts
    echo "172.31.0.6 10.1.0.6 10.1.0.9 p2" >>/tmp/hosts
    echo "172.31.0.3 172.16.0.3 10.1.0.2 pe1" >>/tmp/hosts
    echo "172.31.0.4 10.1.0.10 172.16.1.4 pe2" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname pe2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 172.31.0.4/32
    !
    interface eth1
     no shutdown
     description pe2 -> p2
     ip address 10.1.0.10/30
    !
    interface eth2
     no shutdown
     description pe2 -> h2 [stub]
     ip address 172.16.1.4/24
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [p2] => 
  msg: |-
    initial configuration for p2
    =========================================
    #!/bin/bash
    #
    set -e
    set -x
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)#"
    echo "Use vtysh to connect to FRR daemon"
    echo
    SCRIPT
    #
    # Build hosts file
    #
    echo "# Created by netlab initial" >>/tmp/hosts
    echo "172.31.0.5 10.1.0.1 10.1.0.5 dut" >>/tmp/hosts
    echo "172.16.0.1 h1" >>/tmp/hosts
    echo "172.16.1.2 h2" >>/tmp/hosts
    echo "172.31.0.6 10.1.0.6 10.1.0.9 p2" >>/tmp/hosts
    echo "172.31.0.3 172.16.0.3 10.1.0.2 pe1" >>/tmp/hosts
    echo "172.31.0.4 10.1.0.10 172.16.1.4 pe2" >>/tmp/hosts
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts|sort >>/etc/hosts
  
    #
    # Get the current next hop for the default route
    #
    def_nh=$(ip route list default|awk '{ print $3 }')
    #
    # Create the management VRF and add eth0 to it
    #
    if [ ! -e /sys/devices/virtual/net/mgmt ]; then
      ip link add mgmt type vrf table 42
    fi
    ip link set mgmt up
    sysctl -qw net.ipv6.conf.eth0.keep_addr_on_down=1
    ip link set eth0 master mgmt
    #
    # Reinstall the default route if we had it before
    #
    if [[ -n "$def_nh" ]]; then
      ip route add 0.0.0.0/0 vrf mgmt via $def_nh
    fi
    #
    # Enable FRR modules (if not using containerlab bind-mounted /etc/frr/daemons)
    #
  
    #
    # Create loopbacks and stub devices
    #
    if [ ! -e /sys/class/net/lo ]; then
      if [ ! -e /sys/devices/virtual/net/lo ]; then
        ip link add lo type dummy
        ip link set dev lo up
      fi
    fi
  
    # Disable IPv6 (for IPv4-only interfaces) or SLAAC (if the device is a router)
    #
    sysctl -qw net.ipv6.conf.eth1.disable_ipv6=1
    sysctl -qw net.ipv6.conf.eth2.disable_ipv6=1
  
    #
    # Add vtysh.conf file
    echo "service integrated-vtysh-config" >/etc/frr/vtysh.conf
    #
    # Set Ethernet interface MTU
    ip link set eth1 mtu 1500
    ip link set eth2 mtu 1500
    #
    # Rest of initial configuration done through VTYSH
    #
    cat >/tmp/config <<CONFIG
    hostname p2
    !
    vrf mgmt
     exit-vrf
    !
    frr defaults datacenter
    !
    interface lo
     no shutdown
     ip address 172.31.0.6/32
    !
    interface eth1
     no shutdown
     description p2 -> dut
     ip address 10.1.0.6/30
    !
    interface eth2
     no shutdown
     description p2 -> pe2
     ip address 10.1.0.9/30
    !
    do write
    CONFIG
    vtysh -f /tmp/config
    exit 0
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.0.1/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.0.1/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.0.3
    # loopback prefix: 172.31.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 172.31.0.0/16 2>/dev/null
    set -e
    ip route add 172.31.0.0/16 via 172.16.0.3
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.0.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.0.3
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.0.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.0.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.0.3
    #
    # Print the final routing table
    ip route
ok: [dut] => 
  msg: |-
    initial configuration for dut
    =========================================
  
    updates:
  
    - path: interface[name=system0]/subinterface[index=0]
      val:
       description: "No description"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "172.31.0.5/32"
  
  
    - path: interface[name=ethernet-1/1]
      val:
       subinterface:
        index: 0
        description: "dut ~ pe1"
  
    - path: interface[name=ethernet-1/1]/subinterface[index=0]
      val:
       description: "dut ~ pe1"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.1/30"
          primary: [null]
  
    - path: interface[name=ethernet-1/2]
      val:
       subinterface:
        index: 0
        description: "dut ~ p2"
  
    - path: interface[name=ethernet-1/2]/subinterface[index=0]
      val:
       description: "dut ~ p2"
       ipv4:
        admin-state: enable
        address:
        - ip-prefix: "10.1.0.5/30"
          primary: [null]
  
  
  
    - path: network-instance[name=default]
      val:
       type: default
       interface:
       - name: system0.0
  
    - path: network-instance[name=default]
      val:
       type: default
       interface:
       - name: ethernet-1/1.0
    - path: network-instance[name=default]
      val:
       type: default
       interface:
       - name: ethernet-1/2.0
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    # This script contains the 'ip' commands needed to set up container
    # interfaces and route table. It's executed within the container
    # network namespace on the container host.
    #
    #  /etc/hosts file is generated as a clab bind.
    #
    set -e
    ### One-Shot configuration (non-Ubuntu VM or container)
    #
    # Disable IPv4 and IPv6 forwarding
    #
    sysctl -w net.ipv4.ip_forward=0
    sysctl -w net.ipv6.conf.all.forwarding=0
    #
    # Interface addressing
    #
    ip link set dev eth1 up
    set +e
    ip addr del 172.16.1.2/24 dev eth1 2>/dev/null
    set -e
    ip addr add 172.16.1.2/24 dev eth1
    ip link set eth1 mtu 1500
    #
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    #
    # If you need anything better, use FRR instead of Linux and start routing (or use IPv6)
    #
    # lan prefix: 172.16.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 172.16.0.0/16 2>/dev/null
    set -e
    ip route add 172.16.0.0/16 via 172.16.1.4
    # loopback prefix: 172.31.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 172.31.0.0/16 2>/dev/null
    set -e
    ip route add 172.31.0.0/16 via 172.16.1.4
    # mgmt prefix: 192.168.17.0/24 local subnet: 172.16.1.0/24
    # p2p prefix: 10.1.0.0/16 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.1.0.0/16 2>/dev/null
    set -e
    ip route add 10.1.0.0/16 via 172.16.1.4
    # router_id prefix: 10.0.0.0/24 local subnet: 172.16.1.0/24
    # vrf_loopback prefix: 10.2.0.0/24 local subnet: 172.16.1.0/24
    set +e
    ip route del 10.2.0.0/24 2>/dev/null
    set -e
    ip route add 10.2.0.0/24 via 172.16.1.4
    #
    # Print the final routing table
    ip route

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [pe1]
ok: [pe2]
ok: [p2]
ok: [dut]
ok: [h2]
ok: [h1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/initial-clab.yml for pe1, pe2, p2
included: /home/pipi/net101/tools/netsim/ansible/tasks/linux/initial-clab.yml for h1, h2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut

TASK [Attempt to load VRF kernel module] ***************************************
changed: [pe1 -> localhost]
changed: [pe2 -> localhost]
changed: [p2 -> localhost]

TASK [Disable FRR management VRF when modprobe fails] **************************
skipping: [pe1]
skipping: [pe2]
skipping: [p2]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for pe1, pe2, p2

TASK [template] ****************************************************************
changed: [pe1]
changed: [p2]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [pe1]
ok: [pe2]
ok: [p2]

TASK [run /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
changed: [pe2]
changed: [p2]
changed: [pe1]

TASK [run vtysh to import initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/frr.j2] ***
skipping: [pe1]
skipping: [pe2]
skipping: [p2]

TASK [set_fact] ****************************************************************
ok: [h1]
ok: [h2]

TASK [Create initial container setup from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux-clab.j2] ***
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Initial container configuration via /tmp/config-FZWkXDXQ-h1.sh] **********
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [file] ********************************************************************
changed: [h1 -> localhost]
changed: [h2 -> localhost]

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
ok: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [Generated gNMI config based on /home/pipi/net101/tools/netsim/ansible/templates/initial/srlinux.j2] ***
skipping: [dut]

TASK [Update SRL initial node configuration (gNMI SET template=/home/pipi/net101/tools/netsim/ansible/templates/initial/srlinux.j2,CA=/work/netlab_cicd/clab-ml_17/.tls/ca/ca.pem)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [dut]
ok: [p2]
ok: [pe1]
ok: [pe2]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p2, pe1, pe2 => (item=bgp)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p2, pe1, pe2 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for dut, p2, pe1, pe2 => (item=mpls)

TASK [Figure out whether to deploy the module bgp on current device] ***********
ok: [dut]
ok: [p2]
ok: [pe1]
ok: [pe2]

TASK [Find configuration template for bgp] *************************************
skipping: [dut]
skipping: [p2]
ok: [pe1]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [dut]
skipping: [p2]
ok: [pe1] => 
  msg: |-
    bgp configuration for pe1
    =========================================
    !
    router bgp 65001
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 172.31.0.3
    !
      neighbor 172.31.0.4 remote-as 65001
      neighbor 172.31.0.4 description pe2
      neighbor 172.31.0.4 update-source lo
    !
     address-family ipv4 unicast
    !
    !
      network 172.16.0.0/24
    !
    !
      neighbor 172.31.0.4 activate
      neighbor 172.31.0.4 next-hop-self
      no neighbor 172.31.0.4 send-community all
      neighbor 172.31.0.4 send-community standard
      neighbor 172.31.0.4 send-community large
      neighbor 172.31.0.4 send-community extended
    !
    !
    !
    do write
ok: [pe2] => 
  msg: |-
    bgp configuration for pe2
    =========================================
    !
    router bgp 65001
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp default show-hostname
      bgp default show-nexthop-hostname
  
      ! Consider AS paths of same length but with different AS as ECMP candidates
      bgp bestpath as-path multipath-relax
  
      bgp router-id 172.31.0.4
    !
      neighbor 172.31.0.3 remote-as 65001
      neighbor 172.31.0.3 description pe1
      neighbor 172.31.0.3 update-source lo
    !
     address-family ipv4 unicast
    !
    !
      network 172.16.1.0/24
    !
    !
      neighbor 172.31.0.3 activate
      neighbor 172.31.0.3 next-hop-self
      no neighbor 172.31.0.3 send-community all
      neighbor 172.31.0.3 send-community standard
      neighbor 172.31.0.3 send-community large
      neighbor 172.31.0.3 send-community extended
    !
    !
    !
    do write

TASK [Find configuration deployment deploy_script for bgp] *********************
skipping: [dut]
skipping: [p2]
ok: [pe1]
ok: [pe2]

TASK [Deploy bgp configuration] ************************************************
skipping: [dut]
skipping: [p2]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for pe1, pe2

TASK [template] ****************************************************************
changed: [pe2]
changed: [pe1]

TASK [set_fact] ****************************************************************
ok: [pe1]
ok: [pe2]

TASK [run /tmp/config.sh to deploy bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
skipping: [pe1]
skipping: [pe2]

TASK [run vtysh to import bgp config from /home/pipi/net101/tools/netsim/ansible/templates/bgp/frr.j2] ***
changed: [pe2]
changed: [pe1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [dut]
ok: [p2]
ok: [pe1]
ok: [pe2]

TASK [Find configuration template for ospf] ************************************
ok: [dut]
ok: [p2]
ok: [pe1]
ok: [pe2]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [p2] => 
  msg: |-
    ospf configuration for p2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 172.31.0.6
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! p2 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
    interface eth2
    ! p2 -> pe2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [pe1] => 
  msg: |-
    ospf configuration for pe1
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 172.31.0.3
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth2
    ! pe1 -> dut
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [pe2] => 
  msg: |-
    ospf configuration for pe2
    =========================================
    !
    ! OSPFv2 FRR configuration
    !
    router ospf
     ospf router-id 172.31.0.4
     timers throttle spf 10 50 500
     timers throttle lsa all 100
     timers lsa min-arrival 100
    exit
    !
    interface lo
    !
     ip ospf area 0.0.0.0
    !
    interface eth1
    ! pe2 -> p2
     ip ospf area 0.0.0.0
     ip ospf network point-to-point
    !
  
    !
    do write
ok: [dut] => 
  msg: |-
    ospf configuration for dut
    =========================================
    updates:
    - path: network-instance[name=default]
      val:
       router-id: 172.31.0.5
       protocols:
        ospf:
         instance:
         - name: "0"
           version: ospf-v2
           admin-state: enable
           max-ecmp-paths: 64
           area:
           - area-id: 0.0.0.0
             interface:
             - interface-name: system0.0
               passive: True
           - area-id: 0.0.0.0
             interface:
             - interface-name: ethernet-1/1.0
               interface-type: "point-to-point"
               failure-detection:
                enable-bfd: False
           - area-id: 0.0.0.0
             interface:
             - interface-name: ethernet-1/2.0
               interface-type: "point-to-point"
               failure-detection:
                enable-bfd: False

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [dut]
ok: [p2]
ok: [pe2]
ok: [pe1]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/srlinux.yml for dut
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/frr.yml for p2, pe1, pe2

TASK [Check that required plugin exists, use 'netlab install grpc' to install it] ***
skipping: [dut]

TASK [tempfile] ****************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [dut -> localhost]

TASK [Generated gNMI config based on /home/pipi/net101/tools/netsim/ansible/templates/ospf/srlinux.j2] ***
skipping: [dut]

TASK [Update SRL ospf node configuration (gNMI SET template=/home/pipi/net101/tools/netsim/ansible/templates/ospf/srlinux.j2,CA=/work/netlab_cicd/clab-ml_17/.tls/ca/ca.pem)] ***
changed: [dut]

TASK [debug] *******************************************************************
skipping: [dut]

TASK [file] ********************************************************************
changed: [dut -> localhost]

TASK [template] ****************************************************************
changed: [pe1]
changed: [p2]
changed: [pe2]

TASK [set_fact] ****************************************************************
ok: [p2]
ok: [pe1]
ok: [pe2]

TASK [run /tmp/config.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
skipping: [p2]
skipping: [pe1]
skipping: [pe2]

TASK [run vtysh to import ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/frr.j2] ***
changed: [pe1]
changed: [pe2]
changed: [p2]

TASK [Figure out whether to deploy the module mpls on current device] **********
ok: [dut]
ok: [p2]
ok: [pe1]
ok: [pe2]

TASK [Find configuration template for mpls] ************************************
ok: [dut]
ok: [p2]
ok: [pe2]
ok: [pe1]

TASK [Print deployed configuration when running in verbose mode] ***************
fatal: [dut]: FAILED! => 
  msg: 'An unhandled exception occurred while running the lookup plugin ''template''. Error was a <class ''ansible.errors.AnsibleFilterError''>, original message: LDP only supported on 7250 IXR; use e.g. clab.type "ixr6e" instead of ixrd2. LDP only supported on 7250 IXR; use e.g. clab.type "ixr6e" instead of ixrd2'
ok: [p2] => 
  msg: |-
    mpls configuration for p2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 172.31.0.6
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 172.31.0.6
        interface eth1
        exit
        interface eth2
        exit
      exit
      address-family ipv6
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [pe1] => 
  msg: |-
    mpls configuration for pe1
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth2.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 172.31.0.3
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 172.31.0.3
        interface eth2
        exit
      exit
      address-family ipv6
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0
ok: [pe2] => 
  msg: |-
    mpls configuration for pe2
    =========================================
    #!/bin/bash
  
    set -e
  
    sysctl -w net.mpls.platform_labels=1048575
    sysctl -w net.mpls.conf.eth1.input=1
  
    cat >/tmp/config <<CONFIG
    !
    mpls ldp
      router-id 172.31.0.4
      dual-stack transport-connection prefer ipv4
      address-family ipv4
        discovery transport-address 172.31.0.4
        interface eth1
        exit
      exit
      address-family ipv6
      exit
    !
    !
    do write
    CONFIG
    vtysh -f /tmp/config
  
    exit 0

TASK [Find configuration deployment deploy_script for mpls] ********************
ok: [p2]
ok: [pe1]
ok: [pe2]

TASK [Deploy mpls configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/mpls-clab.yml for p2, pe1, pe2

TASK [Load MPLS kernel modules] ************************************************
changed: [p2 -> localhost]

TASK [include_tasks] ***********************************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/frr/deploy-config.yml for p2, pe1, pe2

TASK [template] ****************************************************************
changed: [pe2]
changed: [pe1]
changed: [p2]

TASK [set_fact] ****************************************************************
ok: [p2]
ok: [pe1]
ok: [pe2]

TASK [run /tmp/config.sh to deploy mpls config from /home/pipi/net101/tools/netsim/ansible/templates/mpls/frr.j2] ***
changed: [p2]
changed: [pe2]
changed: [pe1]

TASK [run vtysh to import mpls config from /home/pipi/net101/tools/netsim/ansible/templates/mpls/frr.j2] ***
skipping: [p2]
skipping: [pe1]
skipping: [pe2]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
dut                        : ok=29   changed=8    unreachable=0    failed=1    skipped=10   rescued=0    ignored=0   
h1                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=12   changed=3    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
p2                         : ok=36   changed=8    unreachable=0    failed=0    skipped=9    rescued=0    ignored=0   
pe1                        : ok=42   changed=9    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   
pe2                        : ok=42   changed=9    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0   

Fatal error in netlab: Executing Ansible playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible failed
Error executing ansible-playbook /home/pipi/net101/tools/netsim/ansible/initial-config.ansible:
  Command '['ansible-playbook', '/home/pipi/net101/tools/netsim/ansible/initial-config.ansible']' returned non-zero exit status 2.
