[WARNING]: Could not match supplied host pattern, ignoring: unprovisioned

PLAY [Deploy initial device configuration] *************************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find device readiness script] ********************************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Wait for device to become ready] *****************************************
skipping: [h1]
skipping: [h2]
skipping: [ros]
skipping: [s1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for h1, h2, ros, s1

TASK [Figure out whether to deploy the module initial on current device] *******
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Find configuration template for initial] *********************************
ok: [h1]
ok: [h2]
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [h1] => 
  msg: |-
    initial configuration for h1
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h1
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.16.0.3 h1
    172.16.1.4 h2
    10.0.0.2 10.1.0.1 ros
    172.16.0.2 172.16.1.2 ros-tenant
    10.0.0.1 10.1.0.2 s1
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h1
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.16.0.3/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    cat <<SCRIPT > /etc/netplan/04-routes-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          routes:
            - to: 172.16.0.0/16
              via: 172.16.0.2
            - to: 10.0.0.0/24
              via: 172.16.0.2
            - to: 10.1.0.0/16
              via: 172.16.0.2
            - to: 10.2.0.0/24
              via: 172.16.0.2
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [h2] => 
  msg: |-
    initial configuration for h2
    =========================================
    #!/bin/bash
    #
    set -e
    #
    # Create bash profile script
    #
    cat <<SCRIPT >/root/.bash_profile
    #!/bin/bash
    #
    export PS1="\h(bash)$ "
    SCRIPT
    #
    # Build hosts file
    #
    hostname h2
    #
    cat <<SCRIPT >/tmp/hosts
    #
    # Created by netlab initial
    #
    172.16.0.3 h1
    172.16.1.4 h2
    10.0.0.2 10.1.0.1 ros
    172.16.0.2 172.16.1.2 ros-tenant
    10.0.0.1 10.1.0.2 s1
    SCRIPT
    grep "Created by netlab" /etc/hosts || uniq /tmp/hosts >>/etc/hosts
    # It seems on the Vagrant box for ubuntu 20.04, DNS Servers are hardcoded as 4.2.2.1 & Co.
    # This is annoying on a network with filtered DNS.
    # DNSMasq server used for giving out DHCP addresses on the management network is able to act as a DNS Server.
    # Let's use that.
    #
    # (Overwrite netplan config to remove DNS stuff)
    echo -n 'Starting initial config ' && date
    cat <<SCRIPT >/etc/netplan/01-netcfg.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth0:
          dhcp4: true
          dhcp6: false
          optional: true
    SCRIPT
    netplan apply
  
    # (Overwrite resolved config to remove DNS stuff)
    cat <<SCRIPT > /etc/systemd/resolved.conf
    [Resolve]
    DNS=
    FallbackDNS=
    Domains=
    DNSOverTLS=no
    Cache=yes
    DNSStubListener=yes
    SCRIPT
  
    systemctl restart systemd-resolved
  
    # Set persistent hostname
    hostnamectl set-hostname h2
  
    NEED_APT_UPDATE=YES
  
    # Sysctl settings: IPv4/IPv6 forwarding, IPv6 LLA
    #
    cat <<SCRIPT > /etc/sysctl.d/10-netsim.conf
    net.ipv4.ip_forward=0
    net.ipv6.conf.all.forwarding=0
  
  
    SCRIPT
    sysctl -p /etc/sysctl.d/10-netsim.conf
  
    # Loopback addressing
  
    # Interface addressing
    cat <<SCRIPT > /etc/netplan/03-eth-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          addresses:
            - 172.16.1.4/24
    SCRIPT
  
    # Add routes to IPv4 address pools pointing to the first neighbor on the first link
    cat <<SCRIPT > /etc/netplan/04-routes-eth1.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        eth1:
          routes:
            - to: 172.16.0.0/16
              via: 172.16.1.2
            - to: 10.0.0.0/24
              via: 172.16.1.2
            - to: 10.1.0.0/16
              via: 172.16.1.2
            - to: 10.2.0.0/24
              via: 172.16.1.2
    SCRIPT
  
    echo -n 'Starting netplan generate ' && date
    netplan generate
    echo -n 'Starting netplan apply ' && date
    nohup netplan apply &
ok: [ros] => 
  msg: |-
    initial configuration for ros
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 'ros'
  
    set vrf name tenant table 100
  
    set interfaces bridge br0 description 'Global Switch Bridge'
    set interfaces bridge br0 enable-vlan
  
    set interfaces bridge br0 vif 1001
    set interfaces bridge br0 vif 1000
  
    set interfaces dummy dum0 address 10.0.0.2/32
  
  
  
    set interfaces ethernet eth1 description 'ros -> s1'
  
    set interfaces ethernet eth1 mtu 1600
  
    set interfaces ethernet eth1 address 10.1.0.1/30
  
  
  
  
  
    set interfaces bridge br0 vif 1000 description 'VLAN red (1000) -> [h1,s1]'
  
  
    set interfaces bridge br0 vif 1000 address 172.16.0.2/24
  
  
    set interfaces bridge br0 vif 1000 vrf tenant
  
  
  
    set interfaces bridge br0 vif 1001 description 'VLAN blue (1001) -> [h2,s1]'
  
  
    set interfaces bridge br0 vif 1001 address 172.16.1.2/24
  
  
    set interfaces bridge br0 vif 1001 vrf tenant
  
  
    set service lldp interface all
    set service lldp interface eth0 disable
  
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart
ok: [s1] => 
  msg: |-
    initial configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
    set system host-name 's1'
  
  
    set interfaces bridge br0 description 'Global Switch Bridge'
    set interfaces bridge br0 enable-vlan
  
    set interfaces bridge br0 vif 1001
    set interfaces bridge br0 vif 1000
  
    set interfaces dummy dum0 address 10.0.0.1/32
  
  
  
    set interfaces ethernet eth1 description 's1 -> ros'
  
    set interfaces ethernet eth1 mtu 1600
  
    set interfaces ethernet eth1 address 10.1.0.2/30
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    set interfaces bridge br0 vif 1000 description 'VLAN red (1000) -> [h1,ros]'
  
  
  
  
  
  
  
    set interfaces bridge br0 vif 1001 description 'VLAN blue (1001) -> [h2,ros]'
  
  
  
  
  
  
    set service lldp interface all
    set service lldp interface eth0 disable
  
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
  
    # Restart FRR to pick up the new hostname
    sudo service frr restart

TASK [Find configuration deployment deploy_script for initial] *****************
ok: [h2]
ok: [h1]
ok: [ros]
ok: [s1]

TASK [Deploy initial configuration] ********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/linux.yml for h1, h2
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for ros, s1

TASK [template] ****************************************************************
changed: [h1]
changed: [h2]

TASK [Execute /tmp/config.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/linux.j2] ***
changed: [h2]
changed: [h1]

TASK [wait_for_connection] *****************************************************
skipping: [ros]
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [ros]
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [template] ****************************************************************
changed: [ros]
changed: [s1]

TASK [execute config-initial.sh to deploy initial config from /home/pipi/net101/tools/netsim/ansible/templates/initial/vyos.j2] ***
changed: [s1]
changed: [ros]

PLAY [Deploy module-specific configurations] ***********************************

TASK [Set variables that cannot be set with VARS] ******************************
ok: [ros]
ok: [s1]

TASK [Deploy individual configuration modules] *********************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vlan)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=ospf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vrf)
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-module.yml for ros, s1 => (item=vxlan)

TASK [Figure out whether to deploy the module vlan on current device] **********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vlan] ************************************
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    vlan configuration for ros
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s1] => 
  msg: |-
    vlan configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
    set interfaces bridge br0 member interface eth2 native-vlan 1000
    set interfaces bridge br0 member interface eth3 native-vlan 1001
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit

TASK [Find configuration deployment deploy_script for vlan] ********************
ok: [ros]
ok: [s1]

TASK [Deploy vlan configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for ros, s1

TASK [wait_for_connection] *****************************************************
skipping: [ros]
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [ros]
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [template] ****************************************************************
changed: [s1]
changed: [ros]

TASK [execute config-vlan.sh to deploy vlan config from /home/pipi/net101/tools/netsim/ansible/templates/vlan/vyos.j2] ***
changed: [ros]
changed: [s1]

TASK [Figure out whether to deploy the module ospf on current device] **********
ok: [ros]
ok: [s1]

TASK [Find configuration template for ospf] ************************************
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    ospf configuration for ros
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
  
    set protocols ospf parameters router-id 10.0.0.2
  
  
  
  
    set protocols ospf interface dum0 passive
    set protocols ospf interface dum0 area 0.0.0.0
  
  
    set protocols ospf interface eth1 area 0.0.0.0
  
    set protocols ospf interface eth1 network point-to-point
  
  
  
    commit
    save
    exit
ok: [s1] => 
  msg: |-
    ospf configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
  
    configure
  
  
    set protocols ospf parameters router-id 10.0.0.1
  
  
  
  
    set protocols ospf interface dum0 passive
    set protocols ospf interface dum0 area 0.0.0.0
  
  
    set protocols ospf interface eth1 area 0.0.0.0
  
    set protocols ospf interface eth1 network point-to-point
  
  
  
    commit
    save
    exit

TASK [Find configuration deployment deploy_script for ospf] ********************
ok: [ros]
ok: [s1]

TASK [Deploy ospf configuration] ***********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for ros, s1

TASK [wait_for_connection] *****************************************************
skipping: [ros]
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [ros]
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [template] ****************************************************************
changed: [ros]
changed: [s1]

TASK [execute config-ospf.sh to deploy ospf config from /home/pipi/net101/tools/netsim/ansible/templates/ospf/vyos.j2] ***
changed: [ros]
changed: [s1]

TASK [Figure out whether to deploy the module vrf on current device] ***********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vrf] *************************************
skipping: [s1]
ok: [ros]

TASK [Print deployed configuration when running in verbose mode] ***************
skipping: [s1]
ok: [ros] => 
  msg: |-
    vrf configuration for ros
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
  
    # Enter vrf sublevel
    edit vrf name tenant
  
  
  
    set protocols ospf parameters router-id 10.0.0.2
  
    set protocols ospf redistribute connected
  
  
  
  
  
    set protocols ospf interface br0.1000 area 0.0.0.0
  
  
  
    set protocols ospf interface br0.1001 area 0.0.0.0
  
  
  
    # Back to root level
    top
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit

TASK [Find configuration deployment deploy_script for vrf] *********************
skipping: [s1]
ok: [ros]

TASK [Deploy vrf configuration] ************************************************
skipping: [s1]
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for ros

TASK [wait_for_connection] *****************************************************
skipping: [ros]

TASK [wait_for] ****************************************************************
skipping: [ros]

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [set_fact] ****************************************************************
ok: [ros]

TASK [template] ****************************************************************
changed: [ros]

TASK [execute config-vrf.sh to deploy vrf config from /home/pipi/net101/tools/netsim/ansible/templates/vrf/vyos.j2] ***
changed: [ros]

TASK [Figure out whether to deploy the module vxlan on current device] *********
ok: [ros]
ok: [s1]

TASK [Find configuration template for vxlan] ***********************************
ok: [ros]
ok: [s1]

TASK [Print deployed configuration when running in verbose mode] ***************
ok: [ros] => 
  msg: |-
    vxlan configuration for ros
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan101000 vni 101000
    set interfaces vxlan vxlan101000 source-address 10.0.0.2
    # And set UDP port to 4789
    set interfaces vxlan vxlan101000 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan101000 native-vlan 1000
  
    # Add VTEP Flood list
    set interfaces vxlan vxlan101000 remote 10.0.0.1
  
    # If flooding is based on EVPN, set 'parameters nolearning'
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan101001 vni 101001
    set interfaces vxlan vxlan101001 source-address 10.0.0.2
    # And set UDP port to 4789
    set interfaces vxlan vxlan101001 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan101001 native-vlan 1001
  
    # Add VTEP Flood list
    set interfaces vxlan vxlan101001 remote 10.0.0.1
  
    # If flooding is based on EVPN, set 'parameters nolearning'
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit
ok: [s1] => 
  msg: |-
    vxlan configuration for s1
    =========================================
    #!/bin/vbash
    source /opt/vyatta/etc/functions/script-template
  
    if [ "$(id -g -n)" != 'vyattacfg' ] ; then
        exec sg vyattacfg -c "/bin/vbash $(readlink -f $0) $@"
    fi
  
    # Configuration items start here
    configure
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan101000 vni 101000
    set interfaces vxlan vxlan101000 source-address 10.0.0.1
    # And set UDP port to 4789
    set interfaces vxlan vxlan101000 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan101000 native-vlan 1000
  
    # Add VTEP Flood list
    set interfaces vxlan vxlan101000 remote 10.0.0.2
  
    # If flooding is based on EVPN, set 'parameters nolearning'
  
  
    # Create VXLAN interface
    set interfaces vxlan vxlan101001 vni 101001
    set interfaces vxlan vxlan101001 source-address 10.0.0.1
    # And set UDP port to 4789
    set interfaces vxlan vxlan101001 port 4789
  
    # Add it to the global bridge
    ## NOTE: in the future we may want to switch to one-bridge-per-vni
    ##   (still to understand if single bridge can work with EVPN controlled VXLAN)
    set interfaces bridge br0 member interface vxlan101001 native-vlan 1001
  
    # Add VTEP Flood list
    set interfaces vxlan vxlan101001 remote 10.0.0.2
  
    # If flooding is based on EVPN, set 'parameters nolearning'
  
  
    # Commit, save and exit from subshell
  
    commit
    save
    exit

TASK [Find configuration deployment deploy_script for vxlan] *******************
ok: [ros]
ok: [s1]

TASK [Deploy vxlan configuration] **********************************************
included: /home/pipi/net101/tools/netsim/ansible/tasks/deploy-config/vyos.yml for ros, s1

TASK [wait_for_connection] *****************************************************
skipping: [ros]
skipping: [s1]

TASK [wait_for] ****************************************************************
skipping: [ros]
skipping: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [set_fact] ****************************************************************
ok: [ros]
ok: [s1]

TASK [template] ****************************************************************
changed: [ros]
changed: [s1]

TASK [execute config-vxlan.sh to deploy vxlan config from /home/pipi/net101/tools/netsim/ansible/templates/vxlan/vyos.j2] ***
changed: [s1]
changed: [ros]

PLAY [Deploy custom deployment templates] **************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
h1                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
h2                         : ok=10   changed=2    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   
ros                        : ok=53   changed=10   unreachable=0    failed=0    skipped=11   rescued=0    ignored=0   
s1                         : ok=45   changed=8    unreachable=0    failed=0    skipped=13   rescued=0    ignored=0   



The devices under test are VLAN-to-VXLAN bridge and VXLAN router-on-a-stick.
Assuming 'vxlan-bridging' test case succeeded, this one tests VXLAN-to-VXLAN
routing

* h1 and h2 should be able to ping each other

